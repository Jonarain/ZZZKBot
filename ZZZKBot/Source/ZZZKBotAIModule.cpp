// Copyright 2016 Chris Coxe.
// 
// ZZZKBot is distributed under the terms of the GNU Lesser General
// Public License (LGPL) version 3.
//
// This file is part of ZZZKBot.
// 
// ZZZKBot is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// ZZZKBot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with ZZZKBot.  If not, see <http://www.gnu.org/licenses/>.
// 
// This file was created by copying then modifying file
// ExampleAIModule/Source/ExampleAIModule.cpp
// of BWAPI version 4.1.2
// (https://github.com/bwapi/bwapi/releases/tag/v4.1.2 which is
// distributed under the terms of the GNU Lesser General Public License
// (LGPL) version 3).

#include "ZZZKBotAIModule.h"
#include <iostream>
#include <limits>

using namespace BWAPI;
using namespace Filter;

void ZZZKBotAIModule::onStart()
{
    // Print the map name.
    // BWAPI returns std::string when retrieving a string, don't forget to add .c_str() when printing!
    Broodwar << "The map is " << Broodwar->mapName() << "!" << std::endl;

    // Enable the UserInput flag, which allows us to control the bot and type messages.
    //Broodwar->enableFlag(Flag::UserInput);

    // Uncomment the following line and the bot will know about everything through the fog of war (cheat).
    //Broodwar->enableFlag(Flag::CompleteMapInformation);

    // Set the command optimization level so that common commands can be grouped
    // and reduce the bot's APM (Actions Per Minute).
    //Broodwar->setCommandOptimizationLevel(2);
    Broodwar->setCommandOptimizationLevel(1);

    // Speedups (including disabling the GUI) for automated play.
    //BWAPI::Broodwar->setLocalSpeed(0);
    //BWAPI::Broodwar->setFrameSkip(16);   // Not needed if using setGUI(false).
    //BWAPI::Broodwar->setGUI(false);

    // Check if this is a replay
    if (Broodwar->isReplay())
    {
        // Announce the players in the replay
        Broodwar << "The following players are in this replay:" << std::endl;

        // Iterate all the players in the game using a std:: iterator
        Playerset players = Broodwar->getPlayers();
        for (auto p : players)
        {
            // Only print the player if they are not an observer
            if (!p->isObserver())
            {
                Broodwar << p->getName() << ", playing as " << p->getRace() << std::endl;
            }
        }
    }
    else // if this is not a replay
    {
        // Retrieve you and your enemy's races. enemy() will just return the first enemy.
        // If you wish to deal with multiple enemies then you must use enemies().
        if (Broodwar->enemy()) // First make sure there is an enemy
        {
            Broodwar << "The matchup is " << Broodwar->self()->getRace() << " vs " << Broodwar->enemy()->getRace() << std::endl;
        }
    }
}

void ZZZKBotAIModule::onEnd(bool isWinner)
{
    // Called when the game ends
    if (isWinner)
    {
        // Log your win here!
    }
}

void ZZZKBotAIModule::onFrame()
{
    // Called once every game frame

    // Display the game frame rate as text in the upper left area of the screen
    Broodwar->drawTextScreen(200, 0,  "FPS: %d", Broodwar->getFPS() );
    Broodwar->drawTextScreen(200, 20, "Average FPS: %f", Broodwar->getAverageFPS() );

    // Return if the game is a replay or is paused
    if (Broodwar->isReplay() || Broodwar->isPaused() || !Broodwar->self())
    {
        return;
    }

    // Unit client info indices.
    // The argument of getClientInfo() is the index.
    // The arguments of setClientInfo() are the value then the index.
    // Note: querying for a value that doesn't exist will return 0,
    // so you can't distinguish value 0 from undefined, so be careful about
    // storing zeroed values.
    // Let's use value 1 to mean it is (i.e. is currently, or was when we check it in later frames)
    // carrying minerals and 0 means not.
    const int wasJustCarryingMineralsInd = 1;
    const int wasJustCarryingMineralsDefaultVal = 0;
    const int wasJustCarryingMineralsTrueVal = 1;
    const int frameLastReturnedMineralsInd = 2;
    const int frameLastChangedPosInd = 3;
    const int frameLastAttackingInd = 4;
    const int frameLastAttackFrameInd = 5;
    const int frameLastStartingAttackInd = 6;
    const int frameLastStoppedInd = 7;
    const int posXInd = 8;
    const int posYInd = 9;
    const int scoutingTargetStartLocXInd = 10;
    const int scoutingTargetStartLocYInd = 11;
    const int scoutingTargetPosXInd = 12;
    const int scoutingTargetPosYInd = 13;

    static std::set<BWAPI::TilePosition> enemyStartLocs;
    static std::set<BWAPI::TilePosition> possibleOverlordScoutLocs;
    bool isARemainingEnemyZerg = false;
    bool isARemainingEnemyTerran = false;
    bool isARemainingEnemyProtoss = false;
    bool isARemainingEnemyRandomRace = false;
    for (const BWAPI::Player& p : Broodwar->enemies())
    {
        if (p->getRace() == BWAPI::Races::Zerg)
        {
            isARemainingEnemyZerg = true;
        }
        else if (p->getRace() == BWAPI::Races::Terran)
        {
            isARemainingEnemyTerran = true;
        }
        else if (p->getRace() == BWAPI::Races::Protoss)
        {
            isARemainingEnemyProtoss = true;
        }
        else
        {
            isARemainingEnemyRandomRace = true;
        }

        const BWAPI::TilePosition enemyStartLoc = p->getStartLocation();
        if (enemyStartLoc != BWAPI::TilePositions::Unknown && enemyStartLoc != BWAPI::TilePositions::None)
        {
            if (enemyStartLocs.empty())
            {
                possibleOverlordScoutLocs.clear();
            }

            possibleOverlordScoutLocs.insert(enemyStartLoc);
            enemyStartLocs.insert(enemyStartLoc);
        }
    }

    static std::set<BWAPI::TilePosition> startLocs;
    static BWAPI::TilePosition myStartLoc = BWAPI::TilePositions::Unknown;
    static BWAPI::Position myStartRoughPos = BWAPI::Positions::Unknown;
    static std::set<BWAPI::TilePosition> otherStartLocs;
    static std::set<BWAPI::TilePosition> scoutedOtherStartLocs;
    static std::set<BWAPI::TilePosition> unscoutedOtherStartLocs;

    auto getRoughPos =
        [](const BWAPI::TilePosition loc, const BWAPI::UnitType ut)
        {
            return Position(Position(loc) + Position((ut.tileWidth() * BWAPI::TILEPOSITION_SCALE) / 2, (ut.tileHeight() * BWAPI::TILEPOSITION_SCALE) / 2));
        };

    if (myStartLoc == BWAPI::TilePositions::Unknown)
    {
        const BWAPI::TilePosition loc = Broodwar->self()->getStartLocation();
        if (loc != BWAPI::TilePositions::None && loc != BWAPI::TilePositions::Unknown)
        {
            myStartLoc = loc;
            myStartRoughPos = getRoughPos(loc, BWAPI::UnitTypes::Special_Start_Location);
        }
    }

    for (const BWAPI::TilePosition loc : Broodwar->getStartLocations())
    {
        if (loc != BWAPI::TilePositions::None && loc != BWAPI::TilePositions::Unknown)
        {
            startLocs.insert(loc);
    
            if (loc != myStartLoc)
            {
                const std::pair<std::set<BWAPI::TilePosition>::iterator, bool> ret = otherStartLocs.insert(loc);
    
                if (ret.second)
                {
                    unscoutedOtherStartLocs.insert(*ret.first);
                    if (enemyStartLocs.empty())
                    {
                        possibleOverlordScoutLocs.insert(*ret.first);
                    }
                }
            }
        }
    }

    struct InitialCreepLocsSet { std::set<const BWAPI::TilePosition> val; };
    struct InitialCreepLocsMap { std::map<const BWAPI::TilePosition, InitialCreepLocsSet> val; };

    static InitialCreepLocsMap initialCreepLocsMap;

    if (initialCreepLocsMap.val.empty())
    {
        const std::string mapHash = Broodwar->mapHash();

        auto& initialCreepLocsMapAuto = initialCreepLocsMap;
        auto addToCreepLocsMap =
            [&initialCreepLocsMapAuto](const BWAPI::TilePosition startLoc, const std::vector<int> creepLocXY)
            {
                for (unsigned int i = 0; i < creepLocXY.size(); i += 2)
                {
                    // Size safety check.
                    if (i + 1 < creepLocXY.size())
                    {
                        initialCreepLocsMapAuto.val[startLoc].val.insert(BWAPI::TilePosition(creepLocXY[i], creepLocXY[i + 1]));
                    }
                }

                return;
            };

        if (mapHash == "1e983eb6bcfa02ef7d75bd572cb59ad3aab49285")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 119), std::vector<int> { 109,119,109,120,109,121,110,117,110,118,110,119,110,120,110,121,110,122,110,123,111,116,111,117,111,118,111,119,111,120,111,121,111,122,111,123,111,124,112,116,112,117,112,118,112,119,112,120,112,121,112,122,112,123,112,124,113,115,113,116,113,117,113,118,113,119,113,120,113,121,113,122,113,123,113,124,113,125,114,115,114,116,114,117,114,118,114,119,114,120,114,121,114,122,114,123,114,124,114,125,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,115,125,116,114,116,115,116,116,116,117,116,118,116,119,116,120,116,121,116,122,116,123,116,124,116,125,117,116,117,117,117,118,117,119,117,120,117,121,117,122,117,123,117,124,117,125,118,116,118,117,118,118,118,119,118,120,118,121,118,122,118,123,118,124,118,125,119,116,119,117,119,118,119,119,119,120,119,121,119,122,119,123,119,124,119,125,120,116,120,117,120,118,120,119,120,120,120,121,120,122,120,123,120,124,120,125,121,114,121,115,121,116,121,117,121,118,121,119,121,120,121,121,121,122,121,123,121,124,122,115,122,116,122,117,122,118,122,119,122,120,122,121,122,122,122,123,122,124,123,115,123,116,123,117,123,118,123,119,123,120,123,121,123,122,123,123,123,124,124,115,124,116,124,118,124,119,124,121,124,122,125,116,125,122,126,116,126,117,126,120,126,122,126,123,126,124,127,117,127,118,127,119,127,120,127,121,127,122,127,123 } );
            addToCreepLocsMap(BWAPI::TilePosition(117, 7), std::vector<int> { 109,7,109,8,109,9,110,10,110,11,110,5,110,6,110,7,110,8,110,9,111,10,111,11,111,12,111,4,111,5,111,6,111,7,111,8,111,9,112,10,112,11,112,12,112,4,112,5,112,6,112,7,112,8,112,9,113,10,113,11,113,12,113,13,113,3,113,4,113,5,113,6,113,7,113,8,113,9,114,10,114,11,114,12,114,13,114,3,114,4,114,5,114,6,114,7,114,8,114,9,115,10,115,11,115,12,115,13,115,3,115,4,115,5,115,6,115,7,115,8,115,9,116,10,116,11,116,12,116,13,116,14,116,2,116,3,116,4,116,5,116,6,116,7,116,8,116,9,117,10,117,11,117,12,117,13,117,14,117,4,117,5,117,6,117,7,117,8,117,9,118,10,118,11,118,12,118,13,118,14,118,4,118,5,118,6,118,7,118,8,118,9,119,10,119,11,119,12,119,13,119,14,119,4,119,5,119,6,119,7,119,8,119,9,120,10,120,11,120,12,120,13,120,14,120,4,120,5,120,6,120,7,120,8,120,9,121,10,121,11,121,12,121,13,121,14,121,2,121,3,121,4,121,5,121,6,121,7,121,8,121,9,122,10,122,11,122,12,122,13,122,3,122,4,122,5,122,6,122,7,122,8,122,9,123,10,123,11,123,12,123,3,123,4,123,5,123,6,123,7,123,8,123,9,124,10,124,3,124,5,124,7,124,8,125,10,126,10,126,11,126,12,126,4,126,6,126,9,127,10,127,11,127,5,127,6,127,7,127,8,127,9 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 118), std::vector<int> { 0,116,0,117,0,118,0,119,0,120,0,121,0,122,1,115,1,116,1,119,1,121,1,123,10,115,10,116,10,117,10,118,10,119,10,120,10,121,10,122,10,123,10,124,10,125,11,113,11,114,11,115,11,116,11,117,11,118,11,119,11,120,11,121,11,122,11,123,11,124,11,125,12,114,12,115,12,116,12,117,12,118,12,119,12,120,12,121,12,122,12,123,12,124,13,114,13,115,13,116,13,117,13,118,13,119,13,120,13,121,13,122,13,123,13,124,14,114,14,115,14,116,14,117,14,118,14,119,14,120,14,121,14,122,14,123,14,124,15,115,15,116,15,117,15,118,15,119,15,120,15,121,15,122,15,123,16,115,16,116,16,117,16,118,16,119,16,120,16,121,16,122,16,123,17,116,17,117,17,118,17,119,17,120,17,121,17,122,18,118,18,119,18,120,2,119,3,114,3,117,3,118,3,119,3,120,3,122,4,114,4,115,4,116,4,117,4,118,4,119,4,120,4,121,4,122,4,123,5,114,5,115,5,116,5,117,5,118,5,119,5,120,5,121,5,122,5,123,5,124,6,113,6,114,6,115,6,116,6,117,6,118,6,119,6,120,6,121,6,122,6,123,6,124,6,125,7,115,7,116,7,117,7,118,7,119,7,120,7,121,7,122,7,123,7,124,7,125,8,115,8,116,8,117,8,118,8,119,8,120,8,121,8,122,8,123,8,124,8,125,9,115,9,116,9,117,9,118,9,119,9,120,9,121,9,122,9,123,9,124,9,125 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 6), std::vector<int> { 0,10,0,4,0,5,0,6,0,7,0,8,0,9,1,10,1,11,1,3,1,4,1,5,1,7,1,8,10,10,10,11,10,12,10,13,10,3,10,4,10,5,10,6,10,7,10,8,10,9,11,1,11,10,11,11,11,12,11,13,11,2,11,3,11,4,11,5,11,6,11,7,11,8,11,9,12,10,12,11,12,12,12,2,12,3,12,4,12,5,12,6,12,7,12,8,12,9,13,10,13,11,13,12,13,2,13,3,13,4,13,5,13,6,13,7,13,8,13,9,14,10,14,11,14,12,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,15,10,15,11,15,3,15,4,15,5,15,6,15,7,15,8,15,9,16,10,16,11,16,3,16,4,16,5,16,6,16,7,16,8,16,9,17,10,17,4,17,5,17,6,17,7,17,8,17,9,18,6,18,7,18,8,2,4,3,2,3,4,3,6,3,9,4,10,4,11,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,10,5,11,5,12,5,2,5,3,5,4,5,5,5,6,5,7,5,8,5,9,6,1,6,10,6,11,6,12,6,13,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,7,10,7,11,7,12,7,13,7,3,7,4,7,5,7,6,7,7,7,8,7,9,8,10,8,11,8,12,8,13,8,3,8,4,8,5,8,6,8,7,8,8,8,9,9,10,9,11,9,12,9,13,9,3,9,4,9,5,9,6,9,7,9,8,9,9 } );
        }
        else if (mapHash == "450a792de0e544b51af5de578061cb8a2f020f32")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 118), std::vector<int> { 109,118,109,119,109,120,110,116,110,117,110,118,110,119,110,120,110,121,110,122,111,115,111,116,111,117,111,118,111,119,111,120,111,121,111,122,111,123,112,115,112,116,112,117,112,118,112,119,112,120,112,121,112,122,112,123,113,114,113,115,113,116,113,117,113,118,113,119,113,120,113,121,113,122,113,123,113,124,114,114,114,115,114,116,114,117,114,118,114,119,114,120,114,121,114,122,114,123,114,124,115,114,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,116,113,116,114,116,115,116,116,116,117,116,118,116,119,116,120,116,121,116,122,116,123,116,124,116,125,117,115,117,116,117,117,117,118,117,119,117,120,117,121,117,122,117,123,117,124,117,125,118,115,118,116,118,117,118,118,118,119,118,120,118,121,118,122,118,123,118,124,118,125,119,115,119,116,119,117,119,118,119,119,119,120,119,121,119,122,119,123,119,124,119,125,120,115,120,116,120,117,120,118,120,119,120,120,120,121,120,122,120,123,120,124,120,125,121,113,121,114,121,115,121,116,121,117,121,118,121,119,121,120,121,121,121,122,121,123,121,124,121,125,122,114,122,115,122,116,122,117,122,118,122,119,122,120,122,121,122,122,122,123,122,124,123,114,123,115,123,116,123,117,123,118,123,119,123,120,123,121,123,122,123,123,124,114,124,116,124,118,124,121,125,116,126,115,126,116,126,117,126,119,126,120,126,122,126,123,127,116,127,117,127,118,127,119,127,120,127,121,127,122 } );
            addToCreepLocsMap(BWAPI::TilePosition(117, 9), std::vector<int> { 109,10,109,11,109,9,110,10,110,11,110,12,110,13,110,7,110,8,110,9,111,10,111,11,111,12,111,13,111,14,111,6,111,7,111,8,111,9,112,10,112,11,112,12,112,13,112,14,112,6,112,7,112,8,112,9,113,10,113,11,113,12,113,13,113,14,113,15,113,5,113,6,113,7,113,8,113,9,114,10,114,11,114,12,114,13,114,14,114,15,114,5,114,6,114,7,114,8,114,9,115,10,115,11,115,12,115,13,115,14,115,15,115,5,115,6,115,7,115,8,115,9,116,10,116,11,116,12,116,13,116,14,116,15,116,16,116,6,116,7,116,8,116,9,117,10,117,11,117,12,117,13,117,14,117,15,117,16,117,6,117,7,117,8,117,9,118,10,118,11,118,12,118,13,118,14,118,15,118,16,118,6,118,7,118,8,118,9,119,10,119,11,119,12,119,13,119,14,119,15,119,16,119,6,119,7,119,8,119,9,120,10,120,11,120,12,120,13,120,14,120,15,120,16,120,4,120,5,120,6,120,7,120,8,120,9,121,10,121,11,121,12,121,13,121,14,121,15,121,16,121,4,121,5,121,6,121,7,121,8,121,9,122,10,122,11,122,12,122,13,122,14,122,15,122,5,122,6,122,7,122,8,122,9,123,10,123,11,123,12,123,13,123,14,123,5,123,6,123,7,123,8,123,9,124,11,124,13,124,5,124,7,124,8,125,7,126,10,126,12,126,14,126,6,126,7,126,9,127,10,127,11,127,12,127,13,127,7,127,8,127,9 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 118), std::vector<int> { 0,116,0,117,0,118,0,119,0,120,0,121,0,122,1,115,1,116,1,117,1,118,1,119,1,120,1,122,1,123,10,115,10,116,10,117,10,118,10,119,10,120,10,121,10,122,10,123,10,124,10,125,11,113,11,114,11,115,11,116,11,117,11,118,11,119,11,120,11,121,11,122,11,123,11,124,11,125,12,114,12,115,12,116,12,117,12,118,12,119,12,120,12,121,12,122,12,123,12,124,13,114,13,115,13,116,13,117,13,118,13,119,13,120,13,121,13,122,13,123,13,124,14,114,14,115,14,116,14,117,14,118,14,119,14,120,14,121,14,122,14,123,14,124,15,115,15,116,15,117,15,118,15,119,15,120,15,121,15,122,15,123,16,115,16,116,16,117,16,118,16,119,16,120,16,121,16,122,16,123,17,116,17,117,17,118,17,119,17,120,17,121,17,122,18,118,18,119,18,120,2,115,2,116,2,118,3,114,3,115,3,116,3,118,3,121,4,114,4,115,4,116,4,117,4,118,4,119,4,120,4,121,4,122,4,123,5,114,5,115,5,116,5,117,5,118,5,119,5,120,5,121,5,122,5,123,6,113,6,114,6,115,6,116,6,117,6,118,6,119,6,120,6,121,6,122,6,123,7,115,7,116,7,117,7,118,7,119,7,120,7,121,7,122,7,123,7,124,8,115,8,116,8,117,8,118,8,119,8,120,8,121,8,122,8,123,8,124,8,125,9,115,9,116,9,117,9,118,9,119,9,120,9,121,9,122,9,123,9,124,9,125 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 9), std::vector<int> { 0,10,0,11,0,12,0,13,0,7,0,8,0,9,1,11,1,13,1,14,1,6,1,7,1,8,10,10,10,11,10,12,10,13,10,14,10,15,10,16,10,6,10,7,10,8,10,9,11,10,11,11,11,12,11,13,11,14,11,15,11,16,11,4,11,5,11,6,11,7,11,8,11,9,12,10,12,11,12,12,12,13,12,14,12,15,12,5,12,6,12,7,12,8,12,9,13,10,13,11,13,12,13,13,13,14,13,15,13,5,13,6,13,7,13,8,13,9,14,10,14,11,14,12,14,13,14,14,14,15,14,5,14,6,14,7,14,8,14,9,15,10,15,11,15,12,15,13,15,14,15,6,15,7,15,8,15,9,16,10,16,11,16,12,16,13,16,14,16,6,16,7,16,8,16,9,17,10,17,11,17,12,17,13,17,7,17,8,17,9,18,10,18,11,18,9,2,6,2,7,3,10,3,12,3,5,3,6,3,7,3,9,4,10,4,11,4,12,4,13,4,14,4,5,4,6,4,7,4,8,4,9,5,10,5,11,5,12,5,13,5,14,5,5,5,6,5,7,5,8,5,9,6,10,6,11,6,12,6,13,6,14,6,16,6,4,6,5,6,6,6,7,6,8,6,9,7,10,7,11,7,12,7,13,7,14,7,15,7,16,7,6,7,7,7,8,7,9,8,10,8,11,8,12,8,13,8,14,8,15,8,16,8,6,8,7,8,8,8,9,9,10,9,11,9,12,9,13,9,14,9,15,9,16,9,6,9,7,9,8,9,9 } );
        }
        else if (mapHash == "4e24f217d2fe4dbfa6799bc57f74d8dc939d425b")
        {
            addToCreepLocsMap(BWAPI::TilePosition(31, 7), std::vector<int> { 23,7,23,8,23,9,24,10,24,11,24,5,24,6,24,7,24,8,24,9,25,10,25,11,25,12,25,4,25,5,25,6,25,9,26,10,26,5,27,10,27,5,27,7,27,8,28,10,28,11,28,12,28,4,28,5,28,6,28,7,28,8,28,9,29,10,29,11,29,12,29,13,29,3,29,4,29,5,29,6,29,7,29,8,29,9,30,10,30,11,30,12,30,13,30,14,30,2,30,3,30,4,30,5,30,6,30,7,30,8,30,9,31,10,31,11,31,12,31,13,31,14,31,4,31,5,31,6,31,7,31,8,31,9,32,10,32,11,32,12,32,13,32,14,32,4,32,5,32,6,32,7,32,8,32,9,33,10,33,11,33,12,33,13,33,14,33,4,33,5,33,6,33,7,33,8,33,9,34,10,34,11,34,12,34,13,34,14,34,4,34,5,34,6,34,7,34,8,34,9,35,10,35,11,35,12,35,13,35,14,35,2,35,3,35,4,35,5,35,6,35,7,35,8,35,9,36,10,36,11,36,12,36,13,36,3,36,4,36,5,36,6,36,7,36,8,36,9,37,10,37,11,37,12,37,13,37,3,37,4,37,5,37,6,37,7,37,8,37,9,38,10,38,11,38,12,38,13,38,3,38,4,38,5,38,6,38,7,38,8,38,9,39,10,39,11,39,12,39,4,39,5,39,6,39,7,39,8,39,9,40,10,40,11,40,12,40,4,40,5,40,6,40,7,40,8,40,9,41,10,41,11,41,5,41,6,41,7,41,8,41,9,42,7,42,8,42,9 } );
            addToCreepLocsMap(BWAPI::TilePosition(64, 118), std::vector<int> { 56,118,56,119,56,120,57,116,57,117,57,118,57,119,57,120,57,121,57,122,58,115,58,116,58,117,58,118,58,119,58,120,58,121,58,122,58,123,59,115,59,116,59,117,59,118,59,119,59,120,59,121,59,122,59,123,60,114,60,115,60,116,60,117,60,118,60,119,60,120,60,121,60,122,60,123,60,124,61,114,61,115,61,116,61,117,61,118,61,119,61,120,61,121,61,122,61,123,61,124,62,114,62,115,62,116,62,117,62,118,62,119,62,120,62,121,62,122,62,123,62,124,63,113,63,114,63,115,63,116,63,117,63,118,63,119,63,120,63,121,63,122,63,123,63,124,63,125,64,115,64,116,64,117,64,118,64,119,64,120,64,121,64,122,64,123,64,124,64,125,65,115,65,116,65,117,65,118,65,119,65,120,65,121,65,122,65,123,65,124,65,125,66,115,66,116,66,117,66,118,66,119,66,120,66,121,66,122,66,123,66,124,66,125,67,115,67,116,67,117,67,118,67,119,67,120,67,121,67,122,67,123,67,124,67,125,68,113,68,114,68,115,68,116,68,117,68,118,68,119,68,120,68,121,68,122,68,123,68,124,68,125,69,114,69,115,69,116,69,117,69,118,69,119,69,120,69,121,69,122,69,123,69,124,70,114,70,115,70,116,70,117,70,118,70,119,70,120,70,121,70,122,70,123,71,114,71,116,71,118,71,119,71,121,72,116,73,115,73,116,73,117,73,120,73,122,73,123,74,116,74,117,74,118,74,119,74,120,74,121,74,122,75,118,75,119,75,120 } );
        }
        else if (mapHash == "6f8da3c3cc8d08d9cf882700efa049280aedca8c")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 56), std::vector<int> { 109,56,109,57,109,58,110,54,110,55,110,56,110,57,110,58,110,59,110,60,111,53,111,54,111,55,111,56,111,57,111,58,111,59,111,60,111,61,112,53,112,54,112,55,112,56,112,57,112,58,112,59,112,60,112,61,113,52,113,53,113,54,113,55,113,56,113,57,113,58,113,59,113,60,113,61,113,62,114,52,114,53,114,54,114,55,114,56,114,57,114,58,114,59,114,60,114,61,114,62,115,52,115,53,115,54,115,55,115,56,115,57,115,58,115,59,115,60,115,61,115,62,116,51,116,52,116,53,116,54,116,55,116,56,116,57,116,58,116,59,116,60,116,61,116,62,116,63,117,53,117,54,117,55,117,56,117,57,117,58,117,59,117,60,117,61,117,62,117,63,118,53,118,54,118,55,118,56,118,57,118,58,118,59,118,60,118,61,118,62,118,63,119,53,119,54,119,55,119,56,119,57,119,58,119,59,119,60,119,61,119,62,119,63,120,53,120,54,120,55,120,56,120,57,120,58,120,59,120,60,120,61,120,62,120,63,121,51,121,52,121,53,121,54,121,55,121,56,121,57,121,58,121,59,121,60,121,61,121,62,121,63,122,52,122,53,122,54,122,55,122,56,122,57,122,58,122,59,122,60,122,61,122,62,123,53,123,54,123,55,123,56,123,57,123,58,123,59,123,60,123,61,123,62,124,54,124,55,124,57,124,58,124,60,124,62,125,54,126,53,126,54,126,56,126,59,126,61,127,54,127,55,127,56,127,57,127,58,127,59,127,60 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 37), std::vector<int> { 0,35,0,36,0,37,0,38,0,39,0,40,0,41,1,34,1,35,1,37,1,40,1,42,10,34,10,35,10,36,10,37,10,38,10,39,10,40,10,41,10,42,10,43,10,44,11,32,11,33,11,34,11,35,11,36,11,37,11,38,11,39,11,40,11,41,11,42,11,43,11,44,12,33,12,34,12,35,12,36,12,37,12,38,12,39,12,40,12,41,12,42,12,43,13,33,13,34,13,35,13,36,13,37,13,38,13,39,13,40,13,41,13,42,13,43,14,33,14,34,14,35,14,36,14,37,14,38,14,39,14,40,14,41,14,42,14,43,15,34,15,35,15,36,15,37,15,38,15,39,15,40,15,41,15,42,16,34,16,35,16,36,16,37,16,38,16,39,16,40,16,41,16,42,17,35,17,36,17,37,17,38,17,39,17,40,17,41,18,37,18,38,18,39,2,35,3,35,3,36,3,38,3,39,3,41,3,43,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,5,33,5,34,5,35,5,36,5,37,5,38,5,39,5,40,5,41,5,42,5,43,6,32,6,33,6,34,6,35,6,36,6,37,6,38,6,39,6,40,6,41,6,42,6,43,6,44,7,34,7,35,7,36,7,37,7,38,7,39,7,40,7,41,7,42,7,43,7,44,8,34,8,35,8,36,8,37,8,38,8,39,8,40,8,41,8,42,8,43,8,44,9,34,9,35,9,36,9,37,9,38,9,39,9,40,9,41,9,42,9,43,9,44 } );
        }
        else if (mapHash == "83320e505f35c65324e93510ce2eafbaa71c9aa1")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 54), std::vector<int> { 109,54,109,55,109,56,110,52,110,53,110,54,110,55,110,56,110,57,110,58,111,51,111,52,111,53,111,54,111,55,111,56,111,57,111,58,111,59,112,51,112,52,112,53,112,54,112,55,112,56,112,57,112,58,112,59,113,50,113,51,113,52,113,53,113,54,113,55,113,56,113,57,113,58,113,59,113,60,114,50,114,51,114,52,114,53,114,54,114,55,114,56,114,57,114,58,114,59,114,60,115,50,115,51,115,52,115,53,115,54,115,55,115,56,115,57,115,58,115,59,115,60,116,49,116,50,116,51,116,52,116,53,116,54,116,55,116,56,116,57,116,58,116,59,116,60,116,61,117,51,117,52,117,53,117,54,117,55,117,56,117,57,117,58,117,59,117,60,117,61,118,51,118,52,118,53,118,54,118,55,118,56,118,57,118,58,118,59,118,60,118,61,119,51,119,52,119,53,119,54,119,55,119,56,119,57,119,58,119,59,119,60,119,61,120,51,120,52,120,53,120,54,120,55,120,56,120,57,120,58,120,59,120,60,120,61,121,49,121,50,121,51,121,52,121,53,121,54,121,55,121,56,121,57,121,58,121,59,121,60,121,61,122,50,122,51,122,52,122,53,122,54,122,55,122,56,122,57,122,58,122,59,122,60,123,50,123,51,123,52,123,53,123,54,123,55,123,56,123,57,123,58,123,59,124,50,124,51,124,53,124,55,124,57,125,51,126,51,126,52,126,54,126,56,126,58,126,59,127,52,127,53,127,54,127,55,127,56,127,57,127,58 } );
            addToCreepLocsMap(BWAPI::TilePosition(49, 7), std::vector<int> { 41,7,41,8,41,9,42,10,42,11,42,5,42,6,42,7,42,8,42,9,43,11,43,12,43,4,43,5,43,6,43,7,43,9,44,6,45,10,45,3,45,6,45,8,46,10,46,11,46,12,46,3,46,4,46,5,46,6,46,7,46,8,46,9,47,10,47,11,47,12,47,13,47,3,47,4,47,5,47,6,47,7,47,8,47,9,48,10,48,11,48,12,48,13,48,14,48,2,48,3,48,4,48,5,48,6,48,7,48,8,48,9,49,10,49,11,49,12,49,13,49,14,49,4,49,5,49,6,49,7,49,8,49,9,50,10,50,11,50,12,50,13,50,14,50,4,50,5,50,6,50,7,50,8,50,9,51,10,51,11,51,12,51,13,51,14,51,4,51,5,51,6,51,7,51,8,51,9,52,10,52,11,52,12,52,13,52,14,52,4,52,5,52,6,52,7,52,8,52,9,53,10,53,11,53,12,53,13,53,14,53,2,53,3,53,4,53,5,53,6,53,7,53,8,53,9,54,10,54,11,54,12,54,13,54,3,54,4,54,5,54,6,54,7,54,8,54,9,55,10,55,11,55,12,55,13,55,3,55,4,55,5,55,6,55,7,55,8,55,9,56,10,56,11,56,12,56,13,56,3,56,4,56,5,56,6,56,7,56,8,56,9,57,10,57,11,57,12,57,4,57,5,57,6,57,7,57,8,57,9,58,10,58,11,58,12,58,4,58,5,58,6,58,7,58,8,58,9,59,10,59,11,59,5,59,6,59,7,59,8,59,9,60,7,60,8,60,9 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 74), std::vector<int> { 0,72,0,73,0,74,0,75,0,76,0,77,0,78,1,71,1,72,1,73,1,74,1,76,1,78,1,79,10,71,10,72,10,73,10,74,10,75,10,76,10,77,10,78,10,79,10,80,10,81,11,69,11,70,11,71,11,72,11,73,11,74,11,75,11,76,11,77,11,78,11,79,11,80,11,81,12,70,12,71,12,72,12,73,12,74,12,75,12,76,12,77,12,78,12,79,12,80,13,70,13,71,13,72,13,73,13,74,13,75,13,76,13,77,13,78,13,79,13,80,14,70,14,71,14,72,14,73,14,74,14,75,14,76,14,77,14,78,14,79,14,80,15,71,15,72,15,73,15,74,15,75,15,76,15,77,15,78,15,79,16,71,16,72,16,73,16,74,16,75,16,76,16,77,16,78,16,79,17,72,17,73,17,74,17,75,17,76,17,77,17,78,18,74,18,75,18,76,2,71,2,73,3,70,3,71,3,73,3,75,3,77,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,5,70,5,71,5,72,5,73,5,74,5,75,5,76,5,77,5,78,5,79,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,81,7,71,7,72,7,73,7,74,7,75,7,76,7,77,7,78,7,79,7,80,7,81,8,71,8,72,8,73,8,74,8,75,8,76,8,77,8,78,8,79,8,80,8,81,9,71,9,72,9,73,9,74,9,75,9,76,9,77,9,78,9,79,9,80,9,81 } );
            addToCreepLocsMap(BWAPI::TilePosition(77, 119), std::vector<int> { 69,119,69,120,69,121,70,117,70,118,70,119,70,120,70,121,70,122,70,123,71,116,71,117,71,118,71,119,71,120,71,121,71,122,71,123,71,124,72,116,72,117,72,118,72,119,72,120,72,121,72,122,72,123,72,124,73,115,73,116,73,117,73,118,73,119,73,120,73,121,73,122,73,123,73,124,73,125,74,115,74,116,74,117,74,118,74,119,74,120,74,121,74,122,74,123,74,124,74,125,75,115,75,116,75,117,75,118,75,119,75,120,75,121,75,122,75,123,75,124,75,125,76,114,76,115,76,116,76,117,76,118,76,119,76,120,76,121,76,122,76,123,76,124,76,125,77,116,77,117,77,118,77,119,77,120,77,121,77,122,77,123,77,124,77,125,78,116,78,117,78,118,78,119,78,120,78,121,78,122,78,123,78,124,78,125,79,116,79,117,79,118,79,119,79,120,79,121,79,122,79,123,79,124,79,125,80,116,80,117,80,118,80,119,80,120,80,121,80,122,80,123,80,124,80,125,81,114,81,115,81,116,81,117,81,118,81,119,81,120,81,121,81,122,81,123,81,124,81,125,82,115,82,116,82,117,82,118,82,119,82,120,82,121,82,122,82,123,82,124,82,125,83,115,83,116,83,117,83,118,83,119,83,120,83,121,83,122,83,123,83,124,84,115,84,116,84,118,84,121,84,123,85,116,86,116,86,117,86,119,86,120,86,122,86,124,87,117,87,118,87,119,87,120,87,121,87,122,87,123,88,119,88,120,88,121 } );
        }
        else if (mapHash == "9bfc271360fa5bab3707a29e1326b84d0ff58911")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 9), std::vector<int> { 109,10,109,11,109,9,110,10,110,11,110,12,110,13,110,7,110,8,110,9,111,10,111,11,111,12,111,13,111,14,111,6,111,7,111,8,111,9,112,10,112,11,112,12,112,13,112,14,112,6,112,7,112,8,112,9,113,10,113,11,113,12,113,13,113,14,113,15,113,5,113,6,113,7,113,8,113,9,114,10,114,11,114,12,114,13,114,14,114,15,114,5,114,6,114,7,114,8,114,9,115,10,115,11,115,12,115,13,115,14,115,15,115,5,115,6,115,7,115,8,115,9,116,10,116,11,116,12,116,13,116,14,116,15,116,16,116,4,116,5,116,6,116,7,116,8,116,9,117,10,117,11,117,12,117,13,117,14,117,15,117,16,117,6,117,7,117,8,117,9,118,10,118,11,118,12,118,13,118,14,118,15,118,16,118,6,118,7,118,8,118,9,119,10,119,11,119,12,119,13,119,14,119,15,119,16,119,6,119,7,119,8,119,9,120,10,120,11,120,12,120,13,120,14,120,15,120,16,120,6,120,7,120,8,120,9,121,10,121,11,121,12,121,13,121,14,121,15,121,16,121,4,121,5,121,6,121,7,121,8,121,9,122,10,122,11,122,12,122,13,122,14,122,5,122,6,122,7,122,8,122,9,123,10,123,11,123,12,123,13,123,14,123,5,123,6,123,7,123,8,123,9,124,10,124,11,124,13,124,15,124,5,124,8,124,9,125,10,126,10,126,12,126,14,126,6,126,7,127,10,127,11,127,12,127,13,127,7,127,8,127,9 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 44), std::vector<int> { 0,42,0,43,0,44,0,45,0,46,0,47,0,48,1,41,1,43,1,46,1,48,1,49,10,41,10,42,10,43,10,44,10,45,10,46,10,47,10,48,10,49,10,50,10,51,11,39,11,40,11,41,11,42,11,43,11,44,11,45,11,46,11,47,11,48,11,49,11,50,11,51,12,40,12,41,12,42,12,43,12,44,12,45,12,46,12,47,12,48,12,49,12,50,13,40,13,41,13,42,13,43,13,44,13,45,13,46,13,47,13,48,13,49,13,50,14,40,14,41,14,42,14,43,14,44,14,45,14,46,14,47,14,48,14,49,14,50,15,41,15,42,15,43,15,44,15,45,15,46,15,47,15,48,15,49,16,41,16,42,16,43,16,44,16,45,16,46,16,47,16,48,16,49,17,42,17,43,17,44,17,45,17,46,17,47,17,48,18,44,18,45,18,46,2,43,2,49,3,40,3,42,3,43,3,44,3,45,3,47,3,49,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,5,40,5,41,5,42,5,43,5,44,5,45,5,46,5,47,5,48,5,49,6,39,6,40,6,41,6,42,6,43,6,44,6,45,6,46,6,47,6,48,6,49,6,51,7,41,7,42,7,43,7,44,7,45,7,46,7,47,7,48,7,49,7,50,7,51,8,41,8,42,8,43,8,44,8,45,8,46,8,47,8,48,8,49,8,50,8,51,9,41,9,42,9,43,9,44,9,45,9,46,9,47,9,48,9,49,9,50,9,51 } );
            addToCreepLocsMap(BWAPI::TilePosition(93, 118), std::vector<int> { 100,114,100,116,100,118,100,120,100,121,101,116,101,121,102,115,102,116,102,117,102,119,102,121,102,122,102,123,103,116,103,117,103,118,103,119,103,120,103,121,103,122,104,118,104,119,104,120,85,118,85,119,85,120,86,116,86,117,86,120,86,121,86,122,87,115,87,116,87,117,87,120,87,121,87,122,87,123,88,115,88,116,88,117,88,120,88,121,88,122,88,123,89,114,89,115,89,116,89,117,89,120,89,121,89,122,89,123,89,124,90,114,90,115,90,116,90,117,90,118,90,119,90,120,90,121,90,122,90,123,90,124,91,114,91,115,91,116,91,117,91,118,91,119,91,120,91,121,91,122,91,123,91,124,92,113,92,114,92,115,92,116,92,117,92,118,92,119,92,120,92,121,92,122,92,123,92,124,92,125,93,113,93,114,93,115,93,116,93,117,93,118,93,119,93,120,93,121,93,122,93,123,93,124,93,125,94,113,94,114,94,115,94,116,94,117,94,118,94,119,94,120,94,121,94,122,94,123,94,124,94,125,95,113,95,114,95,115,95,116,95,117,95,118,95,119,95,120,95,121,95,122,95,123,95,124,95,125,96,113,96,114,96,115,96,116,96,117,96,118,96,119,96,120,96,121,96,122,96,123,96,124,96,125,97,113,97,114,97,115,97,116,97,117,97,118,97,119,97,120,97,121,97,122,97,123,97,125,98,114,98,115,98,116,98,117,98,118,98,119,98,120,98,121,98,122,98,123,99,114,99,115,99,116,99,117,99,118,99,119,99,120,99,121,99,122,99,123 } );
        }
        else if (mapHash == "a220d93efdf05a439b83546a579953c63c863ca7")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 119), std::vector<int> { 109,119,109,120,109,121,110,117,110,118,110,119,110,120,110,121,110,122,110,123,111,116,111,117,111,118,111,119,111,120,111,121,111,122,111,123,111,124,112,116,112,117,112,118,112,119,112,120,112,121,112,122,112,123,112,124,113,115,113,116,113,117,113,118,113,119,113,120,113,121,113,122,113,123,113,124,113,125,114,115,114,116,114,117,114,118,114,119,114,120,114,121,114,122,114,123,114,124,114,125,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,115,125,116,114,116,115,116,116,116,117,116,118,116,119,116,120,116,121,116,122,116,123,116,124,116,125,117,116,117,117,117,118,117,119,117,120,117,121,117,122,117,123,117,124,117,125,118,116,118,117,118,118,118,119,118,120,118,121,118,122,118,123,118,124,118,125,119,116,119,117,119,118,119,119,119,120,119,121,119,122,119,123,119,124,119,125,120,116,120,117,120,118,120,119,120,120,120,121,120,122,120,123,120,124,120,125,121,114,121,115,121,116,121,117,121,118,121,119,121,120,121,121,121,122,121,123,121,124,121,125,122,115,122,116,122,117,122,118,122,119,122,120,122,121,122,122,122,123,122,124,122,125,123,115,123,116,123,117,123,118,123,119,123,120,123,121,123,122,123,123,123,124,124,115,124,118,124,121,124,122 } );
            addToCreepLocsMap(BWAPI::TilePosition(117, 6), std::vector<int> { 109,6,109,7,109,8,110,10,110,4,110,5,110,6,110,7,110,8,110,9,111,10,111,11,111,3,111,4,111,5,111,6,111,7,111,8,111,9,112,10,112,11,112,3,112,4,112,5,112,6,112,7,112,8,112,9,113,10,113,11,113,12,113,2,113,3,113,4,113,5,113,6,113,7,113,8,113,9,114,10,114,11,114,12,114,2,114,3,114,4,114,5,114,6,114,7,114,8,114,9,115,10,115,11,115,12,115,2,115,3,115,4,115,5,115,6,115,7,115,8,115,9,116,1,116,10,116,11,116,12,116,13,116,2,116,3,116,4,116,5,116,6,116,7,116,8,116,9,117,10,117,11,117,12,117,13,117,3,117,4,117,5,117,6,117,7,117,8,117,9,118,10,118,11,118,12,118,13,118,3,118,4,118,5,118,6,118,7,118,8,118,9,119,10,119,11,119,12,119,13,119,3,119,4,119,5,119,6,119,7,119,8,119,9,120,10,120,11,120,12,120,13,120,3,120,4,120,5,120,6,120,7,120,8,120,9,121,1,121,10,121,11,121,12,121,13,121,2,121,3,121,4,121,5,121,6,121,7,121,8,121,9,122,10,122,11,122,12,122,2,122,3,122,4,122,5,122,6,122,7,122,8,122,9,123,10,123,11,123,12,123,2,123,3,123,4,123,5,123,6,123,7,123,8,123,9,124,12,124,2,124,5,124,6,124,9 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 119), std::vector<int> { 10,116,10,117,10,118,10,119,10,120,10,121,10,122,10,123,10,124,10,125,11,114,11,115,11,116,11,117,11,118,11,119,11,120,11,121,11,122,11,123,11,124,11,125,12,115,12,116,12,117,12,118,12,119,12,120,12,121,12,122,12,123,12,124,12,125,13,115,13,116,13,117,13,118,13,119,13,120,13,121,13,122,13,123,13,124,13,125,14,115,14,116,14,117,14,118,14,119,14,120,14,121,14,122,14,123,14,124,14,125,15,116,15,117,15,118,15,119,15,120,15,121,15,122,15,123,15,124,16,116,16,117,16,118,16,119,16,120,16,121,16,122,16,123,16,124,17,117,17,118,17,119,17,120,17,121,17,122,17,123,18,119,18,120,18,121,3,115,3,118,3,120,3,121,4,115,4,116,4,117,4,118,4,119,4,120,4,121,4,122,4,123,4,124,5,115,5,116,5,117,5,118,5,119,5,120,5,121,5,122,5,123,5,124,5,125,6,114,6,115,6,116,6,117,6,118,6,119,6,120,6,121,6,122,6,123,6,124,6,125,7,116,7,117,7,118,7,119,7,120,7,121,7,122,7,123,7,124,7,125,8,116,8,117,8,118,8,119,8,120,8,121,8,122,8,123,8,124,8,125,9,116,9,117,9,118,9,119,9,120,9,121,9,122,9,123,9,124,9,125 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 6), std::vector<int> { 10,10,10,11,10,12,10,13,10,3,10,4,10,5,10,6,10,7,10,8,10,9,11,1,11,10,11,11,11,12,11,13,11,2,11,3,11,4,11,5,11,6,11,7,11,8,11,9,12,10,12,11,12,12,12,2,12,3,12,4,12,5,12,6,12,7,12,8,12,9,13,10,13,11,13,12,13,2,13,3,13,4,13,5,13,6,13,7,13,8,13,9,14,10,14,11,14,12,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,15,10,15,11,15,3,15,4,15,5,15,6,15,7,15,8,15,9,16,10,16,11,16,3,16,4,16,5,16,6,16,7,16,8,16,9,17,10,17,4,17,5,17,6,17,7,17,8,17,9,18,6,18,7,18,8,3,12,3,2,3,5,3,7,3,8,3,9,4,10,4,11,4,12,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,10,5,11,5,12,5,2,5,3,5,4,5,5,5,6,5,7,5,8,5,9,6,1,6,10,6,11,6,12,6,13,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,7,10,7,11,7,12,7,13,7,3,7,4,7,5,7,6,7,7,7,8,7,9,8,10,8,11,8,12,8,13,8,3,8,4,8,5,8,6,8,7,8,8,8,9,9,10,9,11,9,12,9,13,9,3,9,4,9,5,9,6,9,7,9,8,9,9 } );
        }
        else if (mapHash == "af618ea3ed8a8926ca7b17619eebcb9126f0d8b1")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 13), std::vector<int> { 109,13,109,14,109,15,110,11,110,12,110,13,110,14,110,15,110,16,110,17,111,10,111,11,111,12,111,13,111,14,111,15,111,16,111,17,111,18,112,10,112,11,112,12,112,13,112,14,112,15,112,16,112,17,112,18,113,10,113,11,113,12,113,13,113,14,113,15,113,16,113,17,113,18,113,19,113,9,114,10,114,11,114,12,114,13,114,14,114,15,114,16,114,17,114,18,114,19,114,9,115,10,115,11,115,12,115,13,115,14,115,15,115,16,115,17,115,18,115,19,115,9,116,10,116,11,116,12,116,13,116,14,116,15,116,16,116,17,116,18,116,19,116,20,116,8,116,9,117,10,117,11,117,12,117,13,117,14,117,15,117,16,117,17,117,18,117,19,117,20,118,10,118,11,118,12,118,13,118,14,118,15,118,16,118,17,118,18,118,19,118,20,119,10,119,11,119,12,119,13,119,14,119,15,119,16,119,17,119,18,119,19,119,20,120,10,120,11,120,12,120,13,120,14,120,15,120,16,120,17,120,18,120,19,120,20,121,10,121,11,121,12,121,13,121,14,121,15,121,16,121,17,121,18,121,19,121,20,121,8,121,9,122,10,122,11,122,12,122,13,122,14,122,15,122,16,122,17,122,18,122,19,122,9,123,10,123,11,123,12,123,13,123,14,123,15,123,16,123,17,123,18,123,19,124,11,124,13,124,16,124,19,125,11,126,10,126,11,126,12,126,14,126,15,126,17,126,18,127,11,127,12,127,13,127,14,127,15,127,16,127,17 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 96), std::vector<int> { 0,100,0,94,0,95,0,96,0,97,0,98,0,99,1,100,1,101,1,93,1,94,1,95,1,97,1,98,10,100,10,101,10,102,10,103,10,93,10,94,10,95,10,96,10,97,10,98,10,99,11,100,11,101,11,102,11,103,11,91,11,92,11,93,11,94,11,95,11,96,11,97,11,98,11,99,12,100,12,101,12,102,12,92,12,93,12,94,12,95,12,96,12,97,12,98,12,99,13,100,13,101,13,102,13,92,13,93,13,94,13,95,13,96,13,97,13,98,13,99,14,100,14,101,14,102,14,92,14,93,14,94,14,95,14,96,14,97,14,98,14,99,15,100,15,101,15,93,15,94,15,95,15,96,15,97,15,98,15,99,16,100,16,101,16,93,16,94,16,95,16,96,16,97,16,98,16,99,17,100,17,94,17,95,17,96,17,97,17,98,17,99,18,96,18,97,18,98,2,94,3,102,3,94,3,96,3,99,4,100,4,101,4,102,4,93,4,94,4,95,4,96,4,97,4,98,4,99,5,100,5,101,5,102,5,92,5,93,5,94,5,95,5,96,5,97,5,98,5,99,6,100,6,101,6,102,6,103,6,91,6,92,6,93,6,94,6,95,6,96,6,97,6,98,6,99,7,100,7,101,7,102,7,103,7,93,7,94,7,95,7,96,7,97,7,98,7,99,8,100,8,101,8,102,8,103,8,93,8,94,8,95,8,96,8,97,8,98,8,99,9,100,9,101,9,102,9,103,9,93,9,94,9,95,9,96,9,97,9,98,9,99 } );
        }
        else if (mapHash == "ba2fc0ed637e4ec91cc70424335b3c13e131b75a")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 100), std::vector<int> { 109,100,109,101,109,102,110,100,110,101,110,102,110,103,110,104,110,98,110,99,111,100,111,101,111,102,111,103,111,104,111,105,111,97,111,98,111,99,112,100,112,101,112,102,112,103,112,104,112,105,112,97,112,98,112,99,113,100,113,101,113,102,113,103,113,104,113,105,113,106,113,96,113,97,113,98,113,99,114,100,114,101,114,102,114,103,114,104,114,105,114,106,114,96,114,97,114,98,114,99,115,100,115,101,115,102,115,103,115,104,115,105,115,106,115,96,115,97,115,98,115,99,116,100,116,101,116,102,116,103,116,104,116,105,116,106,116,107,116,95,116,96,116,97,116,98,116,99,117,100,117,101,117,102,117,103,117,104,117,105,117,106,117,107,117,97,117,98,117,99,118,100,118,101,118,102,118,103,118,104,118,105,118,106,118,107,118,97,118,98,118,99,119,100,119,101,119,102,119,103,119,104,119,105,119,106,119,107,119,97,119,98,119,99,120,100,120,101,120,102,120,103,120,104,120,105,120,106,120,107,120,97,120,98,120,99,121,100,121,101,121,102,121,103,121,104,121,105,121,106,121,107,121,95,121,96,121,97,121,98,121,99,122,100,122,101,122,102,122,103,122,104,122,105,122,106,122,96,122,97,122,98,122,99,123,100,123,101,123,102,123,103,123,104,123,105,123,106,123,97,123,98,123,99,124,100,124,103,124,106,124,99,125,99,126,101,126,102,126,104,126,105,126,97,126,98,126,99,127,100,127,101,127,102,127,103,127,104,127,98,127,99 } );
            addToCreepLocsMap(BWAPI::TilePosition(68, 6), std::vector<int> { 60,6,60,7,60,8,61,10,61,4,61,5,61,6,61,7,61,8,61,9,62,10,62,11,62,3,62,5,62,7,62,9,63,9,64,2,64,4,64,6,64,8,64,9,65,10,65,11,65,2,65,3,65,4,65,5,65,6,65,7,65,8,65,9,66,10,66,11,66,12,66,2,66,3,66,4,66,5,66,6,66,7,66,8,66,9,67,1,67,10,67,11,67,12,67,13,67,2,67,3,67,4,67,5,67,6,67,7,67,8,67,9,68,10,68,11,68,12,68,13,68,3,68,4,68,5,68,6,68,7,68,8,68,9,69,10,69,11,69,12,69,13,69,3,69,4,69,5,69,6,69,7,69,8,69,9,70,10,70,11,70,12,70,13,70,3,70,4,70,5,70,6,70,7,70,8,70,9,71,10,71,11,71,12,71,13,71,3,71,4,71,5,71,6,71,7,71,8,71,9,72,1,72,10,72,11,72,12,72,13,72,2,72,3,72,4,72,5,72,6,72,7,72,8,72,9,73,10,73,11,73,12,73,2,73,3,73,4,73,5,73,6,73,7,73,8,73,9,74,10,74,11,74,12,74,2,74,3,74,4,74,5,74,6,74,7,74,8,74,9,75,10,75,11,75,12,75,2,75,3,75,4,75,5,75,6,75,7,75,8,75,9,76,10,76,11,76,3,76,4,76,5,76,6,76,7,76,8,76,9,77,10,77,11,77,3,77,4,77,5,77,6,77,7,77,8,77,9,78,10,78,4,78,5,78,6,78,7,78,8,78,9,79,6,79,7,79,8 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 83), std::vector<int> { 0,81,0,82,0,83,0,84,0,85,0,86,0,87,1,80,1,81,1,82,1,84,1,85,1,87,1,88,10,80,10,81,10,82,10,83,10,84,10,85,10,86,10,87,10,88,10,89,10,90,11,78,11,79,11,80,11,81,11,82,11,83,11,84,11,85,11,86,11,87,11,88,11,89,11,90,12,79,12,80,12,81,12,82,12,83,12,84,12,85,12,86,12,87,12,88,12,89,13,79,13,80,13,81,13,82,13,83,13,84,13,85,13,86,13,87,13,88,13,89,14,79,14,80,14,81,14,82,14,83,14,84,14,85,14,86,14,87,14,88,14,89,15,80,15,81,15,82,15,83,15,84,15,85,15,86,15,87,15,88,16,80,16,81,16,82,16,83,16,84,16,85,16,86,16,87,16,88,17,81,17,82,17,83,17,84,17,85,17,86,17,87,18,83,18,84,18,85,2,81,3,81,3,83,3,86,3,89,4,80,4,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,5,79,5,80,5,81,5,82,5,83,5,84,5,85,5,86,5,87,5,88,5,89,6,78,6,79,6,80,6,81,6,82,6,83,6,84,6,85,6,86,6,87,6,88,6,89,6,90,7,80,7,81,7,82,7,83,7,84,7,85,7,86,7,87,7,88,7,89,7,90,8,80,8,81,8,82,8,83,8,84,8,85,8,86,8,87,8,88,8,89,8,90,9,80,9,81,9,82,9,83,9,84,9,85,9,86,9,87,9,88,9,89,9,90 } );
        }
        else if (mapHash == "de2ada75fbc741cfa261ee467bf6416b10f9e301")
        {
            addToCreepLocsMap(BWAPI::TilePosition(117, 40), std::vector<int> { 109,40,109,41,109,42,110,38,110,39,110,40,110,41,110,42,110,43,110,44,111,37,111,38,111,39,111,40,111,41,111,42,111,43,111,44,111,45,112,37,112,38,112,39,112,40,112,41,112,42,112,43,112,44,112,45,113,36,113,37,113,38,113,39,113,40,113,41,113,42,113,43,113,44,113,45,113,46,114,36,114,37,114,38,114,39,114,40,114,41,114,42,114,43,114,44,114,45,114,46,115,36,115,37,115,38,115,39,115,40,115,41,115,42,115,43,115,44,115,45,115,46,116,35,116,36,116,37,116,38,116,39,116,40,116,41,116,42,116,43,116,44,116,45,116,46,116,47,117,37,117,38,117,39,117,40,117,41,117,42,117,43,117,44,117,45,117,46,117,47,118,37,118,38,118,39,118,40,118,41,118,42,118,43,118,44,118,45,118,46,118,47,119,37,119,38,119,39,119,40,119,41,119,42,119,43,119,44,119,45,119,46,119,47,120,37,120,38,120,39,120,40,120,41,120,42,120,43,120,44,120,45,120,46,120,47,121,35,121,36,121,37,121,38,121,39,121,40,121,41,121,42,121,43,121,44,121,45,121,46,121,47,122,36,122,37,122,38,122,39,122,40,122,41,122,42,122,43,122,44,122,45,122,46,123,37,123,38,123,39,123,40,123,41,123,42,123,43,123,44,123,45,124,38,124,40,124,42,124,43,124,44,125,40,125,43,126,37,126,39,126,40,126,41,126,43,126,45,127,38,127,39,127,40,127,41,127,42,127,43,127,44 } );
            addToCreepLocsMap(BWAPI::TilePosition(42, 119), std::vector<int> { 34,119,34,120,34,121,35,117,35,118,35,119,35,120,35,121,35,122,35,123,36,116,36,118,36,119,36,120,36,122,36,123,36,124,37,119,37,123,38,117,38,119,38,121,38,123,39,116,39,117,39,118,39,119,39,120,39,121,39,122,39,123,39,124,40,115,40,116,40,117,40,118,40,119,40,120,40,121,40,122,40,123,40,124,40,125,41,114,41,115,41,116,41,117,41,118,41,119,41,120,41,121,41,122,41,123,41,124,41,125,42,116,42,117,42,118,42,119,42,120,42,121,42,122,42,123,42,124,42,125,43,116,43,117,43,118,43,119,43,120,43,121,43,122,43,123,43,124,43,125,44,116,44,117,44,118,44,119,44,120,44,121,44,122,44,123,44,124,44,125,45,116,45,117,45,118,45,119,45,120,45,121,45,122,45,123,45,124,45,125,46,114,46,115,46,116,46,117,46,118,46,119,46,120,46,121,46,122,46,123,46,124,46,125,47,115,47,116,47,117,47,118,47,119,47,120,47,121,47,122,47,123,47,124,47,125,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,49,115,49,116,49,117,49,118,49,119,49,120,49,121,49,122,49,123,49,124,49,125,50,116,50,117,50,118,50,119,50,120,50,121,50,122,50,123,50,124,51,116,51,117,51,118,51,119,51,120,51,121,51,122,51,123,51,124,52,117,52,118,52,119,52,120,52,121,52,122,52,123,53,119,53,120,53,121 } );
            addToCreepLocsMap(BWAPI::TilePosition(7, 86), std::vector<int> { 0,84,0,85,0,86,0,87,0,88,0,89,0,90,1,83,1,84,1,86,1,88,1,90,1,91,10,81,10,82,10,83,10,84,10,85,10,86,10,87,10,88,10,89,10,90,10,91,10,92,10,93,11,81,11,82,11,83,11,84,11,85,11,86,11,87,11,88,11,89,11,90,11,91,11,92,11,93,12,82,12,83,12,84,12,85,12,86,12,87,12,88,12,89,12,90,12,91,12,92,13,82,13,83,13,84,13,85,13,86,13,87,13,88,13,89,13,90,13,91,13,92,14,82,14,83,14,84,14,85,14,86,14,87,14,88,14,89,14,90,14,91,14,92,15,83,15,84,15,85,15,86,15,87,15,88,15,89,15,90,15,91,16,83,16,84,16,85,16,86,16,87,16,88,16,89,16,90,16,91,17,84,17,85,17,86,17,87,17,88,17,89,17,90,18,86,18,87,18,88,2,83,2,88,3,82,3,83,3,85,3,87,3,88,3,89,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,5,82,5,83,5,84,5,85,5,86,5,87,5,88,5,89,5,90,5,91,6,83,6,84,6,85,6,86,6,87,6,88,6,89,6,90,6,91,6,93,7,83,7,84,7,85,7,86,7,87,7,88,7,89,7,90,7,91,7,92,7,93,8,83,8,84,8,85,8,86,8,87,8,88,8,89,8,90,8,91,8,92,8,93,9,83,9,84,9,85,9,86,9,87,9,88,9,89,9,90,9,91,9,92,9,93 } );
            addToCreepLocsMap(BWAPI::TilePosition(83, 6), std::vector<int> { 75,6,75,7,75,8,76,10,76,4,76,5,76,6,76,7,76,8,76,9,77,10,77,11,77,3,77,4,77,5,77,6,77,7,77,8,77,9,78,10,78,11,78,3,78,4,78,5,78,6,78,7,78,8,78,9,79,10,79,11,79,12,79,2,79,3,79,4,79,5,79,6,79,7,79,8,79,9,80,10,80,11,80,12,80,2,80,3,80,4,80,5,80,6,80,7,80,8,80,9,81,10,81,11,81,12,81,2,81,3,81,4,81,5,81,6,81,7,81,8,81,9,82,1,82,10,82,11,82,12,82,13,82,2,82,3,82,4,82,5,82,6,82,7,82,8,82,9,83,10,83,11,83,12,83,13,83,3,83,4,83,5,83,6,83,7,83,8,83,9,84,10,84,11,84,12,84,13,84,3,84,4,84,5,84,6,84,7,84,8,84,9,85,10,85,11,85,12,85,13,85,3,85,4,85,5,85,6,85,7,85,8,85,9,86,10,86,11,86,12,86,13,86,3,86,4,86,5,86,6,86,7,86,8,86,9,87,1,87,10,87,11,87,12,87,13,87,2,87,3,87,4,87,5,87,6,87,7,87,8,87,9,88,10,88,11,88,12,88,2,88,3,88,4,88,5,88,6,88,7,88,8,88,9,89,10,89,11,89,3,89,4,89,5,89,6,89,7,89,8,89,9,90,10,90,4,90,5,90,6,90,8,91,10,91,5,92,10,92,11,92,3,92,5,92,7,92,9,93,10,93,4,93,5,93,6,93,7,93,8,93,9,94,6,94,7,94,8 } );
        }
    }

    static BWAPI::TilePosition probableEnemyStartLoc = BWAPI::TilePositions::Unknown;
    BWAPI::TilePosition probableEnemyStartLocBasedOnCreep = BWAPI::TilePositions::Unknown;

    if (probableEnemyStartLoc != BWAPI::TilePositions::Unknown &&
        unscoutedOtherStartLocs.find(probableEnemyStartLoc) == unscoutedOtherStartLocs.end())
    {
        probableEnemyStartLoc = BWAPI::TilePositions::Unknown;
    }

    for (const BWAPI::TilePosition otherStartLoc : unscoutedOtherStartLocs)
    {
        const BWAPI::UnitType tmpUnitType = BWAPI::UnitTypes::Special_Start_Location;
        bool foundOne = false;
        for (int tmpX = otherStartLoc.x; tmpX < otherStartLoc.x + tmpUnitType.tileWidth(); ++tmpX)
        {
            for (int tmpY = otherStartLoc.y; tmpY < otherStartLoc.y + tmpUnitType.tileHeight(); ++tmpY)
            {
                const BWAPI::TilePosition tmpLoc = TilePosition(tmpX, tmpY);
                if (Broodwar->isVisible(tmpLoc) &&
                    initialCreepLocsMap.val.at(otherStartLoc).val.find(tmpLoc) != initialCreepLocsMap.val.at(otherStartLoc).val.end() &&
                    Broodwar->getUnitsOnTile(tmpLoc, IsEnemy && IsVisible && Exists && IsBuilding && !IsLifted).empty())
                {
                    scoutedOtherStartLocs.insert(otherStartLoc);

                    if (probableEnemyStartLoc == otherStartLoc)
                    {
                        probableEnemyStartLoc = BWAPI::TilePositions::Unknown;
                    }

                    foundOne = true;
                    break;
                }
            }

            if (foundOne)
            {
                break;
            }
        }

        if (!foundOne && (isARemainingEnemyZerg || isARemainingEnemyRandomRace))
        {
            if (initialCreepLocsMap.val.find(otherStartLoc) != initialCreepLocsMap.val.end())
            {
                for (const BWAPI::TilePosition tmpLoc : initialCreepLocsMap.val.at(otherStartLoc).val)
                {
                    if (Broodwar->isVisible(tmpLoc) &&
                        Broodwar->getUnitsOnTile(tmpLoc, IsVisible && Exists && IsBuilding && !IsLifted).empty())
                    {
                        if (Broodwar->hasCreep(tmpLoc))
                        {
                            probableEnemyStartLocBasedOnCreep = otherStartLoc;
                            probableEnemyStartLoc = probableEnemyStartLocBasedOnCreep;
                            break;
                        }
                        else if (!isARemainingEnemyRandomRace)
                        {
                            scoutedOtherStartLocs.insert(otherStartLoc);

                            if (probableEnemyStartLoc == otherStartLoc)
                            {
                                probableEnemyStartLoc = BWAPI::TilePositions::Unknown;
                            }

                            break;
                        }
                    }
                }
            }
        }
    }

    for (const BWAPI::TilePosition otherStartLoc : scoutedOtherStartLocs)
    {
        unscoutedOtherStartLocs.erase(otherStartLoc);
    }

    static BWAPI::Unit mainBase = nullptr;
    static std::map<const BWAPI::Unit, BWAPI::Unit> gathererToResourceMap;
    auto gathererToResourceMapAuto = gathererToResourceMap;
    static std::map<const BWAPI::Unit, BWAPI::Unit> resourceToGathererMap;
    auto resourceToGathererMapAuto = resourceToGathererMap;

    if (mainBase == nullptr || !mainBase->exists())
    {
        mainBase =
            BWAPI::Broodwar->getClosestUnit(
                (myStartRoughPos != BWAPI::Positions::Unknown ?
                 myStartRoughPos :
                 BWAPI::Position((Broodwar->mapWidth() * BWAPI::TILEPOSITION_SCALE) / 2, (Broodwar->mapHeight() * BWAPI::TILEPOSITION_SCALE) / 2)),
                BWAPI::Filter::IsResourceDepot && BWAPI::Filter::IsOwned && BWAPI::Filter::IsCompleted && !BWAPI::Filter::IsLifted && BWAPI::Filter::Exists);
    }

    auto mainBaseAuto = mainBase;

    static bool isFourPoolBuildOrder = false;
    static bool isSpeedlingBuildOrder = false;
    static bool isMutaRushBuildOrder = false;
    static bool isEnemyXimp = false;
    static bool isEnemyUAlbertaBot = false;
    static int numSunkens = 1;
    static bool checkedEnemyDetails = false;
    if (!checkedEnemyDetails)
    {
        checkedEnemyDetails = true;

        auto beginsWith =
            [](const std::string& baseStr, const std::string& comparisonStr)
            {
                return (bool) (baseStr.compare(0, comparisonStr.size(), comparisonStr) == 0);
            };

        const Playerset players = Broodwar->getPlayers();
        for (auto p : players)
        {
            if (p->isEnemy(Broodwar->self()))
            {
                const BWAPI::Race enemyRace = p->getRace();
                const std::string& enemyName = Broodwar->enemy() ? Broodwar->enemy()->getName() : "";
                std::string enemyNameUpperCase = enemyName;
                std::transform(enemyNameUpperCase.begin(), enemyNameUpperCase.end(),enemyNameUpperCase.begin(), ::toupper);

                if (enemyRace == BWAPI::Races::Protoss &&
                    enemyNameUpperCase == "XIMP")
                {
                    isEnemyXimp = true;
                    isSpeedlingBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 0;
                }

                if (enemyRace == BWAPI::Races::Unknown &&
                    beginsWith(enemyName, "UAlberta"))
                {
                    isEnemyUAlbertaBot = true;
                    isSpeedlingBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 5;
                }

                if (enemyRace == BWAPI::Races::Zerg &&
                    enemyName == "GarmBot")
                {
                    isSpeedlingBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 0;
                }

                if (enemyRace == BWAPI::Races::Zerg &&
                    enemyName == "Overkill")
                {
                    isSpeedlingBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 3;
                }

                if ((enemyRace == BWAPI::Races::Protoss &&
                     ((enemyNameUpperCase == "AIUR") ||
                      (enemyName == "CruzBot") ||
                      (beginsWith(enemyNameUpperCase, "DRAGOON")) ||
                      (beginsWith(enemyNameUpperCase, "MEGABOT")) ||
                      (enemyNameUpperCase == "NUSBOT") ||
                      (beginsWith(enemyNameUpperCase, "XELNAGA")))) ||
                    (enemyRace == BWAPI::Races::Terran &&
                     ((beginsWith(enemyNameUpperCase, "FLASHBOT")) ||
                      (enemyNameUpperCase == "ICEBOT") ||
                      (enemyNameUpperCase == "LETABOT") ||
                      (beginsWith(enemyNameUpperCase, "ORITAKA")) ||
                      (beginsWith(enemyNameUpperCase, "SRBOT")) ||
                      (enemyName == "TerranUAB") ||
                      (beginsWith(enemyNameUpperCase, "TYR")))) ||
                    (enemyRace == BWAPI::Races::Zerg &&
                     ((enemyName == "Cimex") ||
                      (beginsWith(enemyNameUpperCase, "SK3")))))
                {
                    isFourPoolBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 1;
                }

                if (enemyRace == BWAPI::Races::Terran &&
                     beginsWith(enemyNameUpperCase, "IRON"))
                {
                    isFourPoolBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 1;
                }

                if (enemyRace == BWAPI::Races::Zerg &&
                     beginsWith(enemyNameUpperCase, "TSCMOO"))
                {
                    isFourPoolBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 3;
                }

                if (enemyRace == BWAPI::Races::Zerg &&
                     beginsWith(enemyNameUpperCase, "JIA"))
                {
                    isMutaRushBuildOrder = true;
                    numSunkens = 5;
                }

                if (enemyRace == BWAPI::Races::Protoss &&
                     enemyName == "Skynet")
                {
                    isFourPoolBuildOrder = true;
                    isMutaRushBuildOrder = true;
                    numSunkens = 3;
                }
            }
        }
    }

    if (isEnemyUAlbertaBot && !isARemainingEnemyRandomRace)
    {
        if (isARemainingEnemyProtoss)
        {
            numSunkens = 5;
        }
        else if (isARemainingEnemyZerg)
        {
            numSunkens = 3;
        }
        else if (isARemainingEnemyTerran)
        {
            numSunkens = 3;
        }
    }

    const int transitionOutOfFourPoolFrameCountThresh = (isSpeedlingBuildOrder || !isFourPoolBuildOrder || /*Broodwar->self()->getName().compare(0, 4, "test") = 0 ||*/ (Broodwar->self()->getName().compare(0, std::string("ZZZKBot").size(), "ZZZKBot") != 0) || initialCreepLocsMap.val.empty()) ? 0 : (8 * 60 * 24);

    // We ignore stolen gas, at least until a time near when we plan to make an extractor.
    auto isNotStolenGas =
        [&mainBaseAuto, &transitionOutOfFourPoolFrameCountThresh](const Unit& tmpUnit)
        {
            return
                !tmpUnit->getType().isRefinery() ||
                mainBaseAuto == nullptr ||
                Broodwar->getFrameCount() + (60 * 24) >= transitionOutOfFourPoolFrameCountThresh ||
                mainBaseAuto->getDistance(tmpUnit) > 256;
        };

    static std::set<BWAPI::Position> lastKnownEnemyUnliftedBuildingsAnywherePosSet;
    // Block to restrict scope of variables.
    {
        std::set<BWAPI::Position> vacantPosSet;
        for (const BWAPI::Position pos : lastKnownEnemyUnliftedBuildingsAnywherePosSet)
        {
            if (Broodwar->isVisible(TilePosition(pos)) &&
                Broodwar->getUnitsOnTile(
                    TilePosition(pos),
                    IsEnemy && IsVisible && Exists && IsBuilding && !IsLifted &&
                    isNotStolenGas).empty())
            {
                vacantPosSet.insert(pos);
            }
        }

        for (const BWAPI::Position pos : vacantPosSet)
        {
            lastKnownEnemyUnliftedBuildingsAnywherePosSet.erase(pos);
        }
    }

    // TODO: add separate logic for enemy overlords (because e.g. on maps with 3 or more start locations
    // the first enemy overlord I see is not necessarily from the start position
    // nearest it).
    static BWAPI::Position firstEnemyNonWorkerSeenPos = BWAPI::Positions::Unknown;
    static BWAPI::Position closestEnemySeenPos = BWAPI::Positions::Unknown;
    static BWAPI::Position furthestEnemySeenPos = BWAPI::Positions::Unknown;
    static bool isClosestEnemySeenAnOverlord = false;

    const Unitset& allUnits = Broodwar->getAllUnits();
    for (auto& u : allUnits)
    {
        if (u->exists() && u->isVisible() && u->getPlayer() && u->getPlayer()->isEnemy(Broodwar->self()))
        {
            if (u->getType().isBuilding() && !u->isLifted() && isNotStolenGas(u))
            {
                lastKnownEnemyUnliftedBuildingsAnywherePosSet.insert(u->getPosition());
            }

            if (myStartRoughPos != BWAPI::Positions::Unknown &&
                firstEnemyNonWorkerSeenPos == BWAPI::Positions::Unknown &&
                !u->getType().isWorker() /*&&
                u->getType() != BWAPI::UnitTypes::Zerg_Overlord*/)
            {
                if (closestEnemySeenPos == BWAPI::Positions::Unknown || myStartRoughPos.getDistance(u->getPosition()) < myStartRoughPos.getDistance(closestEnemySeenPos))
                {
                    closestEnemySeenPos = u->getPosition();
                    isClosestEnemySeenAnOverlord = u->getType() == BWAPI::UnitTypes::Zerg_Overlord;
                }

                if (furthestEnemySeenPos == BWAPI::Positions::Unknown || myStartRoughPos.getDistance(u->getPosition()) > myStartRoughPos.getDistance(furthestEnemySeenPos))
                {
                    furthestEnemySeenPos = u->getPosition();
                }
            }
        }
    }

    if (firstEnemyNonWorkerSeenPos == BWAPI::Positions::Unknown && furthestEnemySeenPos != BWAPI::Positions::Unknown)
    {
        firstEnemyNonWorkerSeenPos = furthestEnemySeenPos;
    }

    if (probableEnemyStartLoc == BWAPI::TilePositions::Unknown)
    {
        BWAPI::TilePosition probableEnemyStartLocBasedOnEnemyUnits = BWAPI::TilePositions::Unknown;
        if (furthestEnemySeenPos != BWAPI::Positions::Unknown)
        {
            for (const BWAPI::TilePosition loc : unscoutedOtherStartLocs)
            {
                if (probableEnemyStartLocBasedOnEnemyUnits == BWAPI::TilePositions::Unknown ||
                    furthestEnemySeenPos.getDistance(getRoughPos(loc, BWAPI::UnitTypes::Special_Start_Location)) < furthestEnemySeenPos.getDistance(getRoughPos(probableEnemyStartLocBasedOnEnemyUnits, BWAPI::UnitTypes::Special_Start_Location)))
                {
                    probableEnemyStartLocBasedOnEnemyUnits = loc;
                }
            }
        }
    
        if (closestEnemySeenPos != BWAPI::Positions::Unknown && probableEnemyStartLocBasedOnEnemyUnits != BWAPI::TilePositions::Unknown)
        {
            if (!isClosestEnemySeenAnOverlord &&
                myStartRoughPos != BWAPI::Positions::Unknown &&
                myStartRoughPos.getDistance(closestEnemySeenPos) < getRoughPos(probableEnemyStartLocBasedOnEnemyUnits, BWAPI::UnitTypes::Special_Start_Location).getDistance(closestEnemySeenPos))
            {
                // We send combat units to other starting positions in order of their closeness,
                // and 4pool should get combat units faster than any other build, so on most maps
                // our first 6 lings should see their combat units before it gets closer to us than
                // we are to them if they are at one of the two closest other start positions.
                // If not then don't try to guess where they are. TODO: This logic doesn't always
                // work if the enemy made proxy (e.g. proxy rax/gateway) though.
                probableEnemyStartLocBasedOnEnemyUnits = BWAPI::TilePositions::Unknown;
            }
        }

        if (probableEnemyStartLocBasedOnEnemyUnits != BWAPI::TilePositions::Unknown)
        {
            probableEnemyStartLoc = probableEnemyStartLocBasedOnEnemyUnits;
        }
    }

    if (Broodwar->getLatencyFrames() != 2 && Broodwar->getFrameCount() % 2 != 1)
    {
        return;
    }

    const Unitset& myUnits = Broodwar->self()->getUnits();

    // For some reason supplyUsed() takes a few frames get adjusted after an extractor starts morphing,
    // so count it myself, but don't count it myself after I start getting gas because I assume the worker
    // currently in the extractor could be missed.
    int supplyUsed = 0;

    // Special logic to find an enemy unit to attack if there are multiple
    // enemy non-building units (or a single SCV) near any of our workers (e.g. an
    // enemy worker rush) and at least one enemy unit is in one of our worker's
    // weapon range, or at least one of our buildings is low health.
    Unitset myCompletedWorkers;
    BWAPI::Unit lowLifeDrone = nullptr;
    static BWAPI::Unit scoutingWorker = nullptr;
    static BWAPI::Unit scoutingZergling = nullptr;
    bool isBuildingLowLife = false;

    // Count units by type myself because Broodwar->self()->allUnitCount() etc does
    // not count the unit(s) within eggs/lurker eggs/cocoons. Notes:
    // Hydras/mutalisks that are morphing into lurkers/guardians/devourers are only
    // counted as the incomplete type they are morphing to (the count for the type
    // they are morphing from is not increased).
    // The counts might not count the worker currently inside the extractor, if any.
    // Eggs, lurker eggs and cocoons have their own count (in addition to counting
    // what they contain).
    std::map<const BWAPI::UnitType, int> allUnitCount;
    std::map<const BWAPI::UnitType, int> incompleteUnitCount;
    std::map<const BWAPI::UnitType, int> completedUnitCount;

    std::map<const BWAPI::TilePosition, int> numNonOverlordUnitsTargetingStartLoc;

    static bool isScoutingUsingWorker = (!isSpeedlingBuildOrder && isFourPoolBuildOrder);
    static bool isScoutingUsingZergling = (!isScoutingUsingWorker && !isFourPoolBuildOrder && isSpeedlingBuildOrder);
    static bool isNeedScoutingWorker = isScoutingUsingWorker;
    static bool isNeedToMorphScoutingWorker = isScoutingUsingWorker;
    int spireRemainingBuildTime = 0;

    for (auto& u : myUnits)
    {
        if (!u->exists())
        {
            continue;
        }

        ++allUnitCount[u->getType()];
        if (u->isCompleted())
        {
            ++completedUnitCount[u->getType()];
        }
        else
        {
            ++incompleteUnitCount[u->getType()];
            if (u->getType() == BWAPI::UnitTypes::Zerg_Spire)
            {
                spireRemainingBuildTime = u->getRemainingBuildTime();
            }
        }

        supplyUsed += u->getType().supplyRequired();
        if (u->getType() == BWAPI::UnitTypes::Zerg_Egg || u->getType() == BWAPI::UnitTypes::Zerg_Lurker_Egg || u->getType() == BWAPI::UnitTypes::Zerg_Cocoon)
        {
            const BWAPI::UnitType buildType = u->getBuildType();
            if (buildType != BWAPI::UnitTypes::None &&
                buildType != BWAPI::UnitTypes::Unknown)
            {
                int tmpCount = buildType.isTwoUnitsInOneEgg() ? 2 : 1;
                allUnitCount[buildType] += tmpCount;
                incompleteUnitCount[buildType] += tmpCount;
                supplyUsed += buildType.supplyRequired() * tmpCount;
            }
        }

        if (u->getType().isWorker() && u->isCompleted())
        {
            myCompletedWorkers.insert(u);
            if (isScoutingUsingWorker && isNeedScoutingWorker && !isNeedToMorphScoutingWorker && scoutingWorker == nullptr && unscoutedOtherStartLocs.size() > 1 &&
                u->isIdle())
            {
                scoutingWorker = u;
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Zergling && u->isCompleted())
        {
            if (isScoutingUsingZergling && scoutingZergling == nullptr && unscoutedOtherStartLocs.size() > 1 && probableEnemyStartLoc == BWAPI::TilePositions::Unknown)
            {
                scoutingZergling = u;
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Drone && u->getHitPoints() <= 10)
        {
            // Don't interrupt its attack if it is attacking.
            if (u->getLastCommand().getType() == BWAPI::UnitCommandTypes::None ||
                Broodwar->getFrameCount() >= u->getLastCommandFrame() + 2 - (Broodwar->getLatencyFrames() > 2 ? u->getLastCommandFrame() % 2 : 0) ||
                !(u->getTarget() && u->getTarget()->getPlayer() && u->getTarget()->getPlayer()->isEnemy(Broodwar->self())))
            {
                lowLifeDrone = u;
            }
        }

        if (u->getType().isBuilding() && u->isCompleted() &&
            u->getHitPoints() + u->getShields() < ((u->getType().maxHitPoints() + u->getType().maxShields()) * 3) / 10)
        {
            isBuildingLowLife = true;
        }

        if (u->getType() != BWAPI::UnitTypes::Zerg_Overlord)
        {
            const int tmpX = (int) u->getClientInfo(scoutingTargetStartLocXInd);
            const int tmpY = (int) u->getClientInfo(scoutingTargetStartLocYInd);
            if (tmpX != 0 || tmpY != 0)
            {
                ++numNonOverlordUnitsTargetingStartLoc[TilePosition(tmpX, tmpY)];
            }
        }
    }

    if (scoutingWorker != nullptr && myCompletedWorkers.size() < 4)
    {
        isNeedScoutingWorker = false;
        scoutingWorker = nullptr;
    }

    /*if (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60)
    {
        supplyUsed = Broodwar->self()->supplyUsed();
    }*/

    // Worker/base defence logic.
    bool workersShouldRetaliate = false;
    bool shouldDefend = false;
    BWAPI::Unit workerAttackTargetUnit = nullptr;
    for (auto& u : myCompletedWorkers)
    {
        const Unitset& attackableEnemyNonBuildingThreatUnits =
            u->getUnitsInRadius(
                224,
                IsEnemy && IsVisible && IsDetected && Exists &&
                CanAttack &&
                !IsBuilding &&
                [&u, &mainBaseAuto](Unit& tmpUnit)
                {
                    return (mainBaseAuto ? mainBaseAuto->getDistance(tmpUnit) < 224 : true) && u->canAttack(PositionOrUnit(tmpUnit));
                });

        if (isBuildingLowLife ||
            attackableEnemyNonBuildingThreatUnits.size() >= 2 ||
            (myCompletedWorkers.size() > 1 &&
             // Note: using allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] rather than incompleteUnitCount[BWAPI::UnitTypes::Zerg_Extractor]
             // because BWAPI seems to think it is completed.
             myCompletedWorkers.size() + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] + allUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] < 4))
        {
            workersShouldRetaliate = true;
            shouldDefend = true;
        }
        else if (!attackableEnemyNonBuildingThreatUnits.empty() &&
                 (*attackableEnemyNonBuildingThreatUnits.begin())->getType() == BWAPI::UnitTypes::Terran_SCV)
        {
            workersShouldRetaliate = true;
        }

        if (workersShouldRetaliate)
        {
            const BWAPI::Unit& tmpEnemyUnit =
                Broodwar->getBestUnit(
                    [&u](const BWAPI::Unit& bestSoFarUnit, const BWAPI::Unit& curUnit)
                    {
                        if (u->isInWeaponRange(curUnit) != u->isInWeaponRange(bestSoFarUnit))
                        {
                            return u->isInWeaponRange(curUnit) ? curUnit : bestSoFarUnit;
                        }

                        return curUnit->getHitPoints() + curUnit->getShields() + curUnit->getType().armor() + curUnit->getDefenseMatrixPoints() < bestSoFarUnit->getHitPoints() + bestSoFarUnit->getShields() + bestSoFarUnit->getType().armor() + bestSoFarUnit->getDefenseMatrixPoints() ? curUnit : bestSoFarUnit;
                    },
                    IsEnemy && IsVisible && IsDetected && Exists &&
                    CanAttack &&
                    !IsBuilding &&
                    [&u, &mainBaseAuto, &shouldDefend](Unit& tmpUnit)
                    {
                        return
                            (shouldDefend ?
                             (mainBaseAuto ? mainBaseAuto->getDistance(tmpUnit) < 224 : true) :
                             u->isInWeaponRange(tmpUnit)) &&
                            u->canAttack(PositionOrUnit(tmpUnit));
                    },
                    u->getPosition(),
                    std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + 224);

            if (tmpEnemyUnit != nullptr)
            {
                if (workerAttackTargetUnit == nullptr ||
                    tmpEnemyUnit->getHitPoints() + tmpEnemyUnit->getShields() + tmpEnemyUnit->getType().armor() + tmpEnemyUnit->getDefenseMatrixPoints() < workerAttackTargetUnit->getHitPoints() + workerAttackTargetUnit->getShields() + workerAttackTargetUnit->getType().armor() + workerAttackTargetUnit->getDefenseMatrixPoints())
                {
                    workerAttackTargetUnit = tmpEnemyUnit;
                }
            }
        }
    }

    if (workerAttackTargetUnit == nullptr && isBuildingLowLife)
    {
        for (auto& u : myUnits)
        {
            if (u->exists() && u->getType().isBuilding() && u->isCompleted() &&
                u->getHitPoints() + u->getShields() < ((u->getType().maxHitPoints() + u->getType().maxShields()) * 3) / 10)
            {
                workerAttackTargetUnit =
                    u->getClosestUnit(
                        IsEnemy && IsVisible && IsDetected && Exists &&
                        CanAttack &&
                        !IsBuilding &&
                        !IsFlying &&
                        !IsInvincible,
                        256);

                if (workerAttackTargetUnit != nullptr)
                {
                    break;
                }
            }
        }
    }

    // Checks whether BWAPI already has a command pending to be executed for the specified unit.
    auto noCmdPending =
        [](const BWAPI::Unit& tmpUnit)
        {
            return
                (bool)
                (tmpUnit->getLastCommand().getType() == BWAPI::UnitCommandTypes::None ||
                 Broodwar->getFrameCount() >= tmpUnit->getLastCommandFrame() + (Broodwar->getLatencyFrames() > 2 ? Broodwar->getLatencyFrames() - (tmpUnit->getLastCommandFrame() % 2) : Broodwar->getLatencyFrames()));
        };

    // Logic to make a building.
    // TODO: support making buildings concurrently (rather than designing each building's prerequisites to avoid this situation).
    // Note: geyser is only used when building an extractor.
    static BWAPI::Unit geyser = nullptr;
    auto geyserAuto = geyser;
    auto makeUnit =
        [&mainBaseAuto, &allUnitCount, &getRoughPos, &gathererToResourceMapAuto, &resourceToGathererMapAuto, &lowLifeDrone, &geyserAuto, &noCmdPending](
            const BWAPI::UnitType& buildingType,
            BWAPI::Unit& reservedBuilder,
            BWAPI::TilePosition& targetBuildLoc,
            int& frameLastCheckedBuildLoc,
            const int checkBuildLocFreqFrames,
            const bool isNeeded)
        {
            BWAPI::UnitType builderType = buildingType.whatBuilds().first;

            if ((allUnitCount[buildingType] > (buildingType != BWAPI::UnitTypes::Zerg_Hatchery ? 0 : 1)) ||
                (reservedBuilder &&
                 (!reservedBuilder->exists() ||
                  reservedBuilder->getType() != builderType)))
            {
                reservedBuilder = nullptr;
            }

            BWAPI::Unit oldReservedBuilder = reservedBuilder;
            const int oldUnitCount = allUnitCount[buildingType];
        
            if (allUnitCount[buildingType] == (buildingType != BWAPI::UnitTypes::Zerg_Hatchery ? 0 : 1) && isNeeded)
            {
                BWAPI::Unit builder = reservedBuilder;
                reservedBuilder = nullptr;

                if (buildingType == BWAPI::UnitTypes::Zerg_Extractor && lowLifeDrone)
                {
                    builder = lowLifeDrone;
                }

                auto isAvailableToBuild =
                    [&mainBaseAuto, &noCmdPending](Unit& tmpUnit)
                    {
                        return !tmpUnit->isConstructing() && noCmdPending(tmpUnit);
                    };

                if (builder == nullptr && mainBaseAuto)
                {        
                    builder = mainBaseAuto->getClosestUnit(GetType == builderType && IsIdle && !IsCarryingSomething && IsOwned && isAvailableToBuild);
                    if (builder == nullptr)
                        builder = mainBaseAuto->getClosestUnit(GetType == builderType && IsGatheringMinerals && !IsCarryingSomething && IsOwned && isAvailableToBuild);
                    // In case we are being worker rushed, don't necessarily wait for workers to return their
                    // minerals/gas powerup because we should start building the pool asap and the workers are
                    // likely to be almost always fighting.
                    if (buildingType == BWAPI::UnitTypes::Zerg_Spawning_Pool)
                    {
                        if (builder == nullptr)
                            builder = mainBaseAuto->getClosestUnit(GetType == builderType && IsIdle && !IsCarryingGas && IsOwned && isAvailableToBuild);
                        if (builder == nullptr)
                            builder = mainBaseAuto->getClosestUnit(GetType == builderType && IsGatheringMinerals && IsOwned && isAvailableToBuild);
                        if (builder == nullptr)
                            builder = mainBaseAuto->getClosestUnit(GetType == builderType && IsGatheringGas && !IsCarryingGas && IsOwned && isAvailableToBuild);
                        if (builder == nullptr)
                            builder = mainBaseAuto->getClosestUnit(GetType == builderType && IsGatheringGas && IsOwned && isAvailableToBuild);
                    }
                }

                // If a unit was found
                if (builder && (builder != oldReservedBuilder || isAvailableToBuild(builder)))
                {
                    if (targetBuildLoc == BWAPI::TilePositions::None ||
                        targetBuildLoc == BWAPI::TilePositions::Unknown ||
                        targetBuildLoc == BWAPI::TilePositions::Invalid ||
                        Broodwar->getFrameCount() >= frameLastCheckedBuildLoc + checkBuildLocFreqFrames)
                    {
                        if (buildingType == BWAPI::UnitTypes::Zerg_Extractor && mainBaseAuto)
                        {
                            geyserAuto =
                                mainBaseAuto->getClosestUnit(
                                    GetType == BWAPI::UnitTypes::Resource_Vespene_Geyser &&
                                    BWAPI::Filter::Exists,
                                    256);
        
                            if (geyserAuto)
                            {
                                targetBuildLoc = geyserAuto->getTilePosition();
                            }
                        }
                        else
                        {
                            targetBuildLoc = Broodwar->getBuildLocation(buildingType, builder->getTilePosition());
                        }

                        frameLastCheckedBuildLoc = Broodwar->getFrameCount();
                    }

                    if (targetBuildLoc != BWAPI::TilePositions::None &&
                        targetBuildLoc != BWAPI::TilePositions::Unknown &&
                        targetBuildLoc != BWAPI::TilePositions::Invalid)
                    {
                        if (builder->canBuild(buildingType))
                        {
                            if (builder->canBuild(buildingType, targetBuildLoc) &&
                                (buildingType != BWAPI::UnitTypes::Zerg_Extractor ||
                                 (geyserAuto &&
                                  geyserAuto->exists() &&
                                  geyserAuto->getType() == BWAPI::UnitTypes::Resource_Vespene_Geyser)))
                            {
                                if (buildingType == BWAPI::UnitTypes::Zerg_Extractor &&
                                    builder->canRightClick(PositionOrUnit(geyserAuto)) &&
                                    builder->getDistance(geyserAuto) > 16)
                                {
                                    builder->rightClick(geyserAuto);
                                }
                                else
                                {
                                    builder->build(buildingType, targetBuildLoc);
                                }

                                reservedBuilder = builder;
                            }
                            else
                            {
                                targetBuildLoc = BWAPI::TilePositions::None;
                                if (buildingType == BWAPI::UnitTypes::Zerg_Extractor)
                                {
                                    geyserAuto = nullptr;
                                }
                            }
                        }
                        // Not enough minerals or it is not available (e.g. UMS game type).
                        else if (buildingType == BWAPI::UnitTypes::Zerg_Spawning_Pool && Broodwar->self()->isUnitAvailable(buildingType))
                        {
                            // Not enough minerals, so send a worker out to the build location so it is on or nearer the
                            // position when we have enough minerals.
                            const Position targetBuildPos = getRoughPos(targetBuildLoc, buildingType);
                            if (builder->canRightClick(PositionOrUnit(targetBuildPos)))
                            {
                                builder->rightClick(targetBuildPos);
                                reservedBuilder = builder;
                            }
                            else if (builder->canMove())
                            {
                                builder->move(targetBuildPos);
                                reservedBuilder = builder;
                            }
                        }

                        if (reservedBuilder != nullptr)
                        {
                            if (gathererToResourceMapAuto.find(reservedBuilder) != gathererToResourceMapAuto.end() && resourceToGathererMapAuto.find(gathererToResourceMapAuto.at(reservedBuilder)) != resourceToGathererMapAuto.end() && resourceToGathererMapAuto.at(gathererToResourceMapAuto.at(reservedBuilder)) == reservedBuilder)
                            {
                                resourceToGathererMapAuto.erase(gathererToResourceMapAuto.at(reservedBuilder));
                            }
    
                            gathererToResourceMapAuto.erase(reservedBuilder);
                        }
                    }
                }
            }

            if (oldReservedBuilder != nullptr &&
                ((oldUnitCount == (buildingType != BWAPI::UnitTypes::Zerg_Hatchery ? 0 : 1) && !isNeeded) ||
                 (reservedBuilder != nullptr &&
                  reservedBuilder != oldReservedBuilder)) &&
                oldReservedBuilder->getLastCommand().getType() != BWAPI::UnitCommandTypes::None &&
                noCmdPending(oldReservedBuilder) &&
                oldReservedBuilder->canStop())
            {
                oldReservedBuilder->stop();

                if (gathererToResourceMapAuto.find(oldReservedBuilder) != gathererToResourceMapAuto.end() && resourceToGathererMapAuto.find(gathererToResourceMapAuto.at(oldReservedBuilder)) != resourceToGathererMapAuto.end() && resourceToGathererMapAuto.at(gathererToResourceMapAuto.at(oldReservedBuilder)) == oldReservedBuilder)
                {
                    resourceToGathererMapAuto.erase(gathererToResourceMapAuto.at(oldReservedBuilder));
                }

                gathererToResourceMapAuto.erase(oldReservedBuilder);
            }

            if (oldUnitCount > (buildingType != BWAPI::UnitTypes::Zerg_Hatchery ? 0 : 1) || !isNeeded)
            {
                reservedBuilder = nullptr;
            }
            else if (reservedBuilder == nullptr)
            {
                reservedBuilder = oldReservedBuilder;
            }
        };

    int numWorkersTrainedThisFrame = 0;

    const BWAPI::UnitType groundArmyUnitType =
        Broodwar->self()->getRace() == Races::Terran ? UnitTypes::Terran_Marine : (Broodwar->self()->getRace() == Races::Protoss ? UnitTypes::Protoss_Zealot : UnitTypes::Zerg_Zergling);

    const UnitType groundArmyBuildingType =
        Broodwar->self()->getRace() == Races::Terran ? UnitTypes::Terran_Barracks : (Broodwar->self()->getRace() == Races::Protoss ? UnitTypes::Protoss_Gateway : UnitTypes::Zerg_Spawning_Pool);

    // We are 4-pool'ing, hence the figure 24 (i.e. start moving a worker to the build location before we have enough minerals).
    // If drone(s) have died then don't move the builder until we have the full amount of minerals required.
    static Unit groundArmyBuildingBuilder = nullptr;
    // Block to restrict scope of variables.
    {
        static BWAPI::TilePosition groundArmyBuildingLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedGroundArmyBuildingLoc = 0;
        const int checkGroundArmyBuildingLocFreqFrames = (10 * 24);
        makeUnit(
            groundArmyBuildingType, groundArmyBuildingBuilder, groundArmyBuildingLoc, frameLastCheckedGroundArmyBuildingLoc, checkGroundArmyBuildingLocFreqFrames,
            // Note: using allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] rather than incompleteUnitCount[BWAPI::UnitTypes::Zerg_Extractor]
            // because BWAPI seems to think it is completed.
            allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] >= 4 &&
            (Broodwar->canMake(groundArmyBuildingType) ||
             (groundArmyBuildingType == BWAPI::UnitTypes::Zerg_Spawning_Pool &&
              Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) == 0 &&
              Broodwar->self()->minerals() >= groundArmyBuildingType.mineralPrice() - 24)));
    }

    // Use the extractor trick whenever possible when supply-blocked, or when a drone is very low life,
    // or morph an extractor for gathering gas if the time is right.
    static Unit extractorBuilder = nullptr;
    // Block to restrict scope of variables.
    {
        static BWAPI::TilePosition extractorLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedExtractorLoc = 0;
        const int checkExtractorLocFreqFrames = (1 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Extractor, extractorBuilder, extractorLoc, frameLastCheckedExtractorLoc, checkExtractorLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Extractor) &&
            (((supplyUsed == Broodwar->self()->supplyTotal() || supplyUsed == Broodwar->self()->supplyTotal() - 1) &&
              Broodwar->self()->minerals() >= 84 &&
              !(Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60)) ||
             lowLifeDrone != nullptr ||
             (allUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] > 0 &&
              allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame >= 9 &&
              (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
              (isSpeedlingBuildOrder ||
               allUnitCount[BWAPI::UnitTypes::Zerg_Hatchery] + allUnitCount[BWAPI::UnitTypes::Zerg_Lair] + allUnitCount[BWAPI::UnitTypes::Zerg_Hive] >= 2))));
    }

    // Morph creep colony/ies late-game.
    // Block to restrict scope of variables.
    {
        static Unit creepColonyBuilder = nullptr;
        static BWAPI::TilePosition creepColonyLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedCreepColonyLoc = 0;
        const int checkCreepColonyLocFreqFrames = (10 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Creep_Colony, creepColonyBuilder, creepColonyLoc, frameLastCheckedCreepColonyLoc, checkCreepColonyLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Creep_Colony) &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] > 0 &&
            numSunkens > 0 &&
            incompleteUnitCount[BWAPI::UnitTypes::Zerg_Creep_Colony] == 0 &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Creep_Colony] + allUnitCount[BWAPI::UnitTypes::Zerg_Sunken_Colony] < numSunkens &&
            (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60 || (isFourPoolBuildOrder && myCompletedWorkers.size() >= 3 && (Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Zergling) > 14 || Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) >= 2))) &&
            ((isSpeedlingBuildOrder ? (myCompletedWorkers.size() >= 6 && (Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Zergling) > 10 || Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) >= 2)) : (myCompletedWorkers.size() >= 3 && (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60 || (Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Zergling) > 14 || Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) >= 2) && allUnitCount[BWAPI::UnitTypes::Zerg_Creep_Colony] + allUnitCount[BWAPI::UnitTypes::Zerg_Sunken_Colony] < 1))) ||
             allUnitCount[BWAPI::UnitTypes::Zerg_Lair] + allUnitCount[BWAPI::UnitTypes::Zerg_Hive] > 0));
    }

    bool isStartedTransitioning =
        ((Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
         (!isSpeedlingBuildOrder ||
          (Broodwar->getFrameCount() > (5 * 60 * 24) &&
           Broodwar->self()->getUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) == Broodwar->self()->getMaxUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost))));

    // Morph another hatchery late-game.
    // Block to restrict scope of variables.
    {
        static Unit hatcheryBuilder = nullptr;
        static BWAPI::TilePosition hatcheryLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedHatcheryLoc = 0;
        const int checkHatcheryLocFreqFrames = (10 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Hatchery, hatcheryBuilder, hatcheryLoc, frameLastCheckedHatcheryLoc, checkHatcheryLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Hatchery) &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Hatchery] + allUnitCount[BWAPI::UnitTypes::Zerg_Lair] + allUnitCount[BWAPI::UnitTypes::Zerg_Hive] <= 1 &&
            (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
            isStartedTransitioning &&
            (numSunkens == 0 ||
             ((allUnitCount[BWAPI::UnitTypes::Zerg_Creep_Colony] + allUnitCount[BWAPI::UnitTypes::Zerg_Sunken_Colony] >= numSunkens) ||
              (Broodwar->self()->minerals() >=
               BWAPI::UnitTypes::Zerg_Hatchery.mineralPrice() +
               ((numSunkens - allUnitCount[BWAPI::UnitTypes::Zerg_Creep_Colony]) * BWAPI::UnitTypes::Zerg_Creep_Colony.mineralPrice()) +
               ((numSunkens - allUnitCount[BWAPI::UnitTypes::Zerg_Sunken_Colony]) * BWAPI::UnitTypes::Zerg_Sunken_Colony.mineralPrice())))));
    }

    // Morph to queen's nest late-game.
    // Block to restrict scope of variables.
    {
        static Unit queensNestBuilder = nullptr;
        static BWAPI::TilePosition queensNestLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedQueensNestLoc = 0;
        const int checkQueensNestLocFreqFrames = (10 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Queens_Nest, queensNestBuilder, queensNestLoc, frameLastCheckedQueensNestLoc, checkQueensNestLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Queens_Nest) &&
            (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
            (!isMutaRushBuildOrder ||
             (allUnitCount[BWAPI::UnitTypes::Zerg_Spire] > 0 &&
              Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) > 0)));
    }

    // Morph to spire late-game. Check that a queen's nest and hive are already morphing/completed
    // because I prefer mutalisks or guardians before hydralisks,
    // and otherwise builders may try to build at the same place and fail.
    // Block to restrict scope of variables.
    {
        static Unit spireBuilder = nullptr;
        static BWAPI::TilePosition spireLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedSpireLoc = 0;
        const int checkSpireLocFreqFrames = (10 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Spire, spireBuilder, spireLoc, frameLastCheckedSpireLoc, checkSpireLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Spire) &&
            (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] == 0 &&
            (isMutaRushBuildOrder ||
             (allUnitCount[BWAPI::UnitTypes::Zerg_Queens_Nest] > 0 &&
              allUnitCount[BWAPI::UnitTypes::Zerg_Hive] > 0)));
    }

    // Morph to hydralisk den late-game. Check that a queen's nest and hive and spire
    // and some guardians are already morphing/completed
    // because I prefer mutalisks or guardians before hydralisks,
    // and otherwise builders may try to build at the same place and fail.
    // Block to restrict scope of variables.
    {
        static Unit hydraDenBuilder = nullptr;
        static BWAPI::TilePosition hydraDenLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedHydraDenLoc = 0;
        const int checkHydraDenLocFreqFrames = (10 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Hydralisk_Den, hydraDenBuilder, hydraDenLoc, frameLastCheckedHydraDenLoc, checkHydraDenLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Hydralisk_Den) &&
            (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Queens_Nest] > 0 &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Hive] > 0 &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Spire] + allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] > 0 &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Guardian] > 8);
    }

    // Morph to ultralisk cavern late-game. Check that a hyrdalisk den and greater spire
    // and some guardians are already morphing/completed
    // because I prefer guardians before ultras.
    // Block to restrict scope of variables.
    {
        static Unit ultraCavernBuilder = nullptr;
        static BWAPI::TilePosition ultraCavernLoc = BWAPI::TilePositions::None;
        static int frameLastCheckedUltraCavernLoc = 0;
        const int checkUltraCavernLocFreqFrames = (10 * 24);
        makeUnit(
            BWAPI::UnitTypes::Zerg_Ultralisk_Cavern, ultraCavernBuilder, ultraCavernLoc, frameLastCheckedUltraCavernLoc, checkUltraCavernLocFreqFrames,
            Broodwar->canMake(BWAPI::UnitTypes::Zerg_Ultralisk_Cavern) &&
            (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Hydralisk_Den] > 0 &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] > 0 &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Guardian] > 8);
    }

    // A horrible way of making just enough gatherers gather gas, but it seems to work ok, so don't worry about it for the time being.
    for (auto& u : myUnits)
    {
        if (u->getType() == BWAPI::UnitTypes::Zerg_Extractor && u->isCompleted())
        {
            static int lastAddedGathererToRefinery = 0;
            if (Broodwar->getFrameCount() > lastAddedGathererToRefinery + (3 * 24))
            {
                BWAPI::Unit gasGatherer = u->getClosestUnit(
                    IsOwned && Exists && GetType == BWAPI::UnitTypes::Zerg_Drone &&
                    (CurrentOrder == BWAPI::Orders::MoveToGas || CurrentOrder == BWAPI::Orders::WaitForGas),
                    256);

                if (myCompletedWorkers.size() <= 6 ||
                    (isSpeedlingBuildOrder &&
                     (/*Broodwar->self()->gas() >= BWAPI::UpgradeTypes::Metabolic_Boost.gasPrice() ||*/
                      Broodwar->self()->isUpgrading(BWAPI::UpgradeTypes::Metabolic_Boost) /*||
                      Broodwar->self()->getUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) == Broodwar->self()->getMaxUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost)*/)) ||
                    (Broodwar->self()->gas() >= 675) ||
                    ((!isSpeedlingBuildOrder ||
                      Broodwar->self()->getUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) == Broodwar->self()->getMaxUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost)) &&
                     !isStartedTransitioning))
                {
                    if (gasGatherer != nullptr)
                    {
                        if (!gasGatherer->isConstructing() && noCmdPending(gasGatherer) && gasGatherer->canStop())
                        {
                            gasGatherer->stop();
                            continue;
                        }
                    }
                }
                else
                {
                    if (gasGatherer == nullptr && myCompletedWorkers.size() > 6)
                    {        
                        auto isAvailableToGatherFrom =
                            [&u, &noCmdPending](Unit& tmpUnit)
                            {
                                return !tmpUnit->isConstructing() && noCmdPending(tmpUnit) && tmpUnit->canGather(u);
                            };

                        BWAPI::Unit newGasGatherer = newGasGatherer = u->getClosestUnit(GetType == BWAPI::UnitTypes::Zerg_Drone && IsIdle && !IsCarryingSomething && IsOwned && isAvailableToGatherFrom);
                        if (newGasGatherer == nullptr)
                            newGasGatherer = u->getClosestUnit(GetType == BWAPI::UnitTypes::Zerg_Drone && IsGatheringMinerals && !IsCarryingSomething && IsOwned && isAvailableToGatherFrom);
                        if (newGasGatherer == nullptr)
                            newGasGatherer = u->getClosestUnit(GetType == BWAPI::UnitTypes::Zerg_Drone && IsIdle && !IsCarryingGas && IsOwned && isAvailableToGatherFrom);
                        if (newGasGatherer == nullptr)
                            newGasGatherer = u->getClosestUnit(GetType == BWAPI::UnitTypes::Zerg_Drone && IsGatheringMinerals && IsOwned && isAvailableToGatherFrom);
                        // If a unit was found
                        if (newGasGatherer)
                        {
                            newGasGatherer->gather(u);
        
                            if (resourceToGathererMap.find(u) != resourceToGathererMap.end())
                            {
                                gathererToResourceMap.erase(resourceToGathererMap.at(u));
                            }
        
                            resourceToGathererMap[u] = newGasGatherer;
                            gathererToResourceMap[newGasGatherer] = u;
                            lastAddedGathererToRefinery = Broodwar->getFrameCount();
                        }
                    }
        
                    break;
                }
            }
        }
    }

    Unitset myFreeGatherers;

    // The main loop.
    for (auto& u : myUnits)
    {
        if (u->getLastCommandFrame() == Broodwar->getFrameCount() && u->getLastCommand().getType() != BWAPI::UnitCommandTypes::None)
        {
            // Already issued a command to this unit this frame (e.g. a build command) so skip this unit.
            continue;
        }

        if (!u->canCommand() || u->isStuck())
            continue;

        // Cancel morph when appropriate if we are using the extractor trick.
        if (u->getType() == BWAPI::UnitTypes::Zerg_Extractor && !u->isCompleted())
        {
            if (Broodwar->getFrameCount() < transitionOutOfFourPoolFrameCountThresh &&
                supplyUsed < 60 &&
                (completedUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] == 0 ||
                 (supplyUsed >= Broodwar->self()->supplyTotal() - 1 ||
                  ((Broodwar->self()->minerals() < 50 ||
                    allUnitCount[BWAPI::UnitTypes::Zerg_Larva] == 0) &&
                   supplyUsed < Broodwar->self()->supplyTotal() - 3) ||
                  u->getRemainingBuildTime() <= Broodwar->getRemainingLatencyFrames() + 2)))
            {
                if (u->canCancelMorph())
                {
                    u->cancelMorph();
                    continue;
                }
            }
        }

        // Cancel pool if we have no completed/incomplete drones and definitely wouldn't be able
        // to get any drones after it completes (assuming any incomplete hatcheries are left to complete).
        if (u->getType() == BWAPI::UnitTypes::Zerg_Spawning_Pool &&
            !u->isCompleted())
        {
            // Note: using allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] rather than incompleteUnitCount[BWAPI::UnitTypes::Zerg_Extractor]
            // because BWAPI seems to think it is completed.
            if (allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] == 0 &&
                (Broodwar->self()->minerals() < 50 ||
                 (allUnitCount[BWAPI::UnitTypes::Zerg_Hatchery] == 0 &&
                  allUnitCount[BWAPI::UnitTypes::Zerg_Lair] == 0 &&
                  allUnitCount[BWAPI::UnitTypes::Zerg_Hive] == 0 &&
                  allUnitCount[BWAPI::UnitTypes::Zerg_Larva] == 0)))
            {
                if (u->canCancelMorph())
                {
                    u->cancelMorph();
                    continue;
                }
            }
        }

        // Cancel egg if it doesn't contain a drone and we have no completed/incomplete drones and definitely wouldn't be able
        // to get any drones if it were to complete (assuming any incomplete hatcheries are left to complete).
        // Note: using allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] rather than incompleteUnitCount[BWAPI::UnitTypes::Zerg_Extractor]
        // because BWAPI seems to think it is completed.
        if (completedUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] > 0 &&
            u->getType() == BWAPI::UnitTypes::Zerg_Egg &&
            !u->isCompleted() &&
            u->getBuildType() != BWAPI::UnitTypes::None &&
            u->getBuildType() != BWAPI::UnitTypes::Unknown &&
            allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] == 0 &&
            (Broodwar->self()->minerals() < 50 ||
             (allUnitCount[BWAPI::UnitTypes::Zerg_Hatchery] == 0 &&
              allUnitCount[BWAPI::UnitTypes::Zerg_Lair] == 0 &&
              allUnitCount[BWAPI::UnitTypes::Zerg_Hive] == 0 &&
              allUnitCount[BWAPI::UnitTypes::Zerg_Larva] == 0)))
        {
            if (u->canCancelMorph())
            {
                u->cancelMorph();
                continue;
            }
        }

        static bool isScoutingWorkerReadyToScout = false;

        // Cancel pool if a drone has died and we have a low number of workers.
        if (u->getType() == BWAPI::UnitTypes::Zerg_Spawning_Pool &&
            !u->isCompleted())
        {
            // Note: using allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] rather than incompleteUnitCount[BWAPI::UnitTypes::Zerg_Extractor]
            // because BWAPI seems to think it is completed.
            if (allUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] == 1 &&
                Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) > (isScoutingWorkerReadyToScout ? 1 : 0) &&
                allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] < 3)
            {
                if (u->canCancelMorph())
                {
                    u->cancelMorph();
                    continue;
                }
            }
        }

        // Ignore the unit if it is incomplete or busy constructing
        if (!u->isCompleted() || u->isConstructing())
            continue;

        // For speedling build or late game, upgrade metabolic boost when possible.
        if ((isSpeedlingBuildOrder ||
             Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Mutalisk) + Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Guardian) > 0) &&
            u->getType() == BWAPI::UnitTypes::Zerg_Spawning_Pool)
        {
            if (u->canUpgrade(BWAPI::UpgradeTypes::Metabolic_Boost))
            {
                u->upgrade(BWAPI::UpgradeTypes::Metabolic_Boost);
                continue;
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Spawning_Pool &&
            Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Mutalisk) + Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Guardian) > 0)
        {
            if (u->canUpgrade(BWAPI::UpgradeTypes::Adrenal_Glands))
            {
                u->upgrade(BWAPI::UpgradeTypes::Adrenal_Glands);
                continue;
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Spire || u->getType() == BWAPI::UnitTypes::Zerg_Greater_Spire)
        {
            if (u->canUpgrade(BWAPI::UpgradeTypes::Zerg_Flyer_Attacks) &&
                allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] > 0)
            {
                u->upgrade(BWAPI::UpgradeTypes::Zerg_Flyer_Attacks);
                continue;
            }

            if (u->canUpgrade(BWAPI::UpgradeTypes::Zerg_Flyer_Carapace) &&
                allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] > 0)
            {
                u->upgrade(BWAPI::UpgradeTypes::Zerg_Flyer_Attacks);
                continue;
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Hydralisk_Den)
        {
            if (u->canUpgrade(BWAPI::UpgradeTypes::Grooved_Spines))
            {
                u->upgrade(BWAPI::UpgradeTypes::Grooved_Spines);
                continue;
            }

            if (u->canUpgrade(BWAPI::UpgradeTypes::Muscular_Augments))
            {
                u->upgrade(BWAPI::UpgradeTypes::Muscular_Augments);
                continue;
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Ultralisk_Cavern)
        {
            if (u->canUpgrade(BWAPI::UpgradeTypes::Chitinous_Plating))
            {
                u->upgrade(BWAPI::UpgradeTypes::Chitinous_Plating);
                continue;
            }

            if (u->canUpgrade(BWAPI::UpgradeTypes::Anabolic_Synthesis))
            {
                u->upgrade(BWAPI::UpgradeTypes::Anabolic_Synthesis);
                continue;
            }
        }

        // Could also take into account higher ground advantage, cover advantage (e.g. in trees), HP regen, shields regen,
        // effects of spells like dark swarm. The list is endless.
        auto getBestEnemyThreatUnitLambda =
            [&u](const BWAPI::Unit& bestSoFarUnit, const BWAPI::Unit& curUnit)
            {
                if (curUnit->isPowered() != bestSoFarUnit->isPowered())
                {
                    return curUnit->isPowered() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isLockedDown() != bestSoFarUnit->isLockedDown())
                {
                    return !curUnit->isLockedDown() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isMaelstrommed() != bestSoFarUnit->isMaelstrommed())
                {
                    return !curUnit->isMaelstrommed() ? curUnit : bestSoFarUnit;
                }

                // Prefer to attack units that can return fire or could be tactical threats in certain scenarios.
                const BWAPI::UnitType curUnitType = curUnit->getType();
                const BWAPI::UnitType bestSoFarUnitType = bestSoFarUnit->getType();
                const BWAPI::WeaponType curUnitWeaponType =
                    u->isFlying() ? curUnitType.airWeapon() : curUnitType.groundWeapon();
                const BWAPI::WeaponType bestSoFarUnitWeaponType =
                    u->isFlying() ? bestSoFarUnitType.airWeapon() : bestSoFarUnitType.groundWeapon();
                if (curUnitWeaponType != bestSoFarUnitWeaponType)
                {
                    if (curUnitWeaponType == BWAPI::WeaponTypes::None &&
                        // FYI, Protoss_Carrier, Hero_Gantrithor, Protoss_Reaver, Hero_Warbringer are the
                        // only BWAPI::UnitType's that have no weapon but UnitType::canAttack() returns true.
                        curUnitType.canAttack() &&
                        curUnitType != BWAPI::UnitTypes::Terran_Bunker &&
                        curUnitType != BWAPI::UnitTypes::Protoss_High_Templar &&
                        curUnitType != BWAPI::UnitTypes::Zerg_Defiler &&
                        curUnitType != BWAPI::UnitTypes::Protoss_Dark_Archon &&
                        curUnitType != BWAPI::UnitTypes::Terran_Science_Vessel &&
                        curUnitType != BWAPI::UnitTypes::Zerg_Queen &&
                        curUnitType != BWAPI::UnitTypes::Protoss_Shuttle &&
                        curUnitType != BWAPI::UnitTypes::Terran_Dropship &&
                        curUnitType != BWAPI::UnitTypes::Protoss_Observer &&
                        curUnitType != BWAPI::UnitTypes::Zerg_Overlord &&
                        curUnitType != BWAPI::UnitTypes::Terran_Medic &&
                        curUnitType != BWAPI::UnitTypes::Terran_Nuclear_Silo &&
                        curUnitType != BWAPI::UnitTypes::Zerg_Nydus_Canal /*&&
                        // TODO: re-enable Terran_Comsat_Station after add any
                        // logic to produce cloaked units.
                        curUnitType != BWAPI::UnitTypes::Terran_Comsat_Station*/)
                    {
                        return bestSoFarUnit;
                    }

                    if (bestSoFarUnitWeaponType == BWAPI::WeaponTypes::None &&
                        // FYI, Protoss_Carrier, Hero_Gantrithor, Protoss_Reaver, Hero_Warbringer are the
                        // only BWAPI::UnitType's that have no weapon but UnitType::canAttack() returns true.
                        bestSoFarUnitType.canAttack() &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Terran_Bunker &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Protoss_High_Templar &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Zerg_Defiler &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Protoss_Dark_Archon &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Terran_Science_Vessel &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Zerg_Queen &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Protoss_Shuttle &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Terran_Dropship &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Protoss_Observer &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Zerg_Overlord &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Terran_Medic &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Terran_Nuclear_Silo &&
                        bestSoFarUnitType != BWAPI::UnitTypes::Zerg_Nydus_Canal /*&&
                        // TODO: re-enable Terran_Comsat_Station after add any
                        // logic to produce cloaked units.
                        bestSoFarUnitType != BWAPI::UnitTypes::Terran_Comsat_Station*/)
                    {
                        return curUnit;
                    }
                }

                auto unitTypeScoreLambda = [](const BWAPI::UnitType& unitType) -> int
                    {
                        return
                            unitType == BWAPI::UnitTypes::Protoss_Pylon ? 30000 :
                            unitType == BWAPI::UnitTypes::Protoss_Nexus ? 29000 :
                            unitType == BWAPI::UnitTypes::Terran_Command_Center ? 28000 :
                            unitType == BWAPI::UnitTypes::Zerg_Hive ? 27000 :
                            unitType == BWAPI::UnitTypes::Zerg_Lair ? 26000 :
                            unitType == BWAPI::UnitTypes::Zerg_Hatchery ? 25000 :
                            unitType == BWAPI::UnitTypes::Zerg_Greater_Spire ? 24000 :
                            unitType == BWAPI::UnitTypes::Zerg_Spire ? 23000 :
                            unitType == BWAPI::UnitTypes::Terran_Starport ? 22000 :
                            unitType == BWAPI::UnitTypes::Protoss_Stargate ? 21000 :
                            unitType == BWAPI::UnitTypes::Terran_Factory ? 20000 :
                            unitType == BWAPI::UnitTypes::Terran_Barracks ? 19000 :
                            unitType == BWAPI::UnitTypes::Zerg_Spawning_Pool ? 18000 :
                            unitType == BWAPI::UnitTypes::Zerg_Hydralisk_Den ? 17000 :
                            unitType == BWAPI::UnitTypes::Zerg_Queens_Nest ? 16000 :
                            unitType == BWAPI::UnitTypes::Protoss_Templar_Archives ? 15000 :
                            unitType == BWAPI::UnitTypes::Protoss_Gateway ? 14000 :
                            unitType == BWAPI::UnitTypes::Protoss_Cybernetics_Core ? 13000 :
                            unitType == BWAPI::UnitTypes::Protoss_Shield_Battery ? 12000 :
                            unitType == BWAPI::UnitTypes::Protoss_Forge ? 11000 :
                            unitType == BWAPI::UnitTypes::Protoss_Citadel_of_Adun ? 10000 :
                            unitType == BWAPI::UnitTypes::Terran_Academy ? 9000 :
                            unitType == BWAPI::UnitTypes::Terran_Engineering_Bay ? 8000 :
                            unitType == BWAPI::UnitTypes::Zerg_Creep_Colony ? 7000 :
                            unitType == BWAPI::UnitTypes::Zerg_Evolution_Chamber ? 6000 :
                            unitType == BWAPI::UnitTypes::Zerg_Lurker_Egg ? 5000 :
                            unitType == BWAPI::UnitTypes::Zerg_Egg ? 4000 :
                            unitType == BWAPI::UnitTypes::Zerg_Larva ? 3000 :
                            unitType == BWAPI::UnitTypes::Zerg_Spore_Colony ? 2000 :
                            unitType == BWAPI::UnitTypes::Terran_Missile_Turret ? 1000 :
                            unitType == BWAPI::UnitTypes::Terran_Supply_Depot ? -1000 :
                            unitType.isRefinery() ? -2000 :
                            unitType == BWAPI::UnitTypes::Terran_Covert_Ops ? -3000 :
                            unitType == BWAPI::UnitTypes::Terran_Control_Tower ? -4000 :
                            unitType == BWAPI::UnitTypes::Terran_Machine_Shop ? -5000 :
                            unitType == BWAPI::UnitTypes::Terran_Comsat_Station ? -6000 :
                            unitType == BWAPI::UnitTypes::Protoss_Scarab ? -7000 :
                            unitType == BWAPI::UnitTypes::Terran_Vulture_Spider_Mine ? -8000 :
                            unitType == BWAPI::UnitTypes::Zerg_Infested_Terran ? -9000 :
                            0;
                    };

                const int curUnitTypeScore = unitTypeScoreLambda(curUnitType);
                const int bestSoFarUnitTypeScore = unitTypeScoreLambda(bestSoFarUnitType);
                if (curUnitTypeScore != bestSoFarUnitTypeScore)
                {
                    return curUnitTypeScore > bestSoFarUnitTypeScore ? curUnit : bestSoFarUnit;
                }

                // If the set of units being considered only contains workers or contains no workers
                // then this should work as intended.
                if (curUnit->getType().isWorker() && bestSoFarUnit->getType().isWorker() &&
                    !u->isInWeaponRange(curUnit) && !u->isInWeaponRange(bestSoFarUnit) &&
                    u->getDistance(curUnit) != u->getDistance(bestSoFarUnit))
                {
                    return (u->getDistance(curUnit) < u->getDistance(bestSoFarUnit)) ? curUnit : bestSoFarUnit;
                }

                const int curUnitLifeForceScore =
                    curUnit->getHitPoints() + curUnit->getShields() + curUnitType.armor() + curUnit->getDefenseMatrixPoints();
                const int bestSoFarUnitLifeForceScore =
                    bestSoFarUnit->getHitPoints() + bestSoFarUnit->getShields() + bestSoFarUnitType.armor() + bestSoFarUnit->getDefenseMatrixPoints();
                if (curUnitLifeForceScore != bestSoFarUnitLifeForceScore)
                {
                    return curUnitLifeForceScore < bestSoFarUnitLifeForceScore ? curUnit : bestSoFarUnit;
                }

                // Whether irradiate is good or bad is very situational (it depends whether it is
                // positioned amongst more of my units than the enemy's) but for now let's assume
                // it is positioned amongst more of mine. TODO: add special logic once my bot can
                // cast irradiate.
                if (curUnit->isIrradiated() != bestSoFarUnit->isIrradiated())
                {
                    return !curUnit->isIrradiated() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isBeingHealed() != bestSoFarUnit->isBeingHealed())
                {
                    return !curUnit->isBeingHealed() ? curUnit : bestSoFarUnit;
                }

                if (curUnitType.regeneratesHP() != bestSoFarUnitType.regeneratesHP())
                {
                    return !curUnitType.regeneratesHP() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isRepairing() != bestSoFarUnit->isRepairing())
                {
                    return curUnit->isRepairing() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isConstructing() != bestSoFarUnit->isConstructing())
                {
                    return curUnit->isConstructing() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isPlagued() != bestSoFarUnit->isPlagued())
                {
                    return !curUnit->isPlagued() ? curUnit : bestSoFarUnit;
                }

                if ((curUnit->getTarget() == u) != (bestSoFarUnit->getTarget() == u) || (curUnit->getOrderTarget() == u) != (bestSoFarUnit->getOrderTarget() == u))
                {
                    return ((curUnit->getTarget() == u && bestSoFarUnit->getTarget() != u) || (curUnit->getOrderTarget() == u && bestSoFarUnit->getOrderTarget() != u)) ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isAttacking() != bestSoFarUnit->isAttacking())
                {
                    return curUnit->isAttacking() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->getSpellCooldown() != bestSoFarUnit->getSpellCooldown())
                {
                    return curUnit->getSpellCooldown() < bestSoFarUnit->getSpellCooldown() ? curUnit : bestSoFarUnit;
                }

                if (!u->isFlying())
                {
                    if (curUnit->getGroundWeaponCooldown() != bestSoFarUnit->getGroundWeaponCooldown())
                    {
                        return curUnit->getGroundWeaponCooldown() < bestSoFarUnit->getGroundWeaponCooldown() ? curUnit : bestSoFarUnit;
                    }
                }
                else
                {    
                    if (curUnit->getAirWeaponCooldown() != bestSoFarUnit->getAirWeaponCooldown())
                    {
                        return curUnit->getAirWeaponCooldown() < bestSoFarUnit->getAirWeaponCooldown() ? curUnit : bestSoFarUnit;
                    }
                }

                if (curUnit->isStartingAttack() != bestSoFarUnit->isStartingAttack())
                {
                    return !curUnit->isStartingAttack() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isAttackFrame() != bestSoFarUnit->isAttackFrame())
                {
                    return !curUnit->isAttackFrame() ? curUnit : bestSoFarUnit;
                }

                // Prefer stationary targets (because more likely to hit them).
                if (curUnit->isHoldingPosition() != bestSoFarUnit->isHoldingPosition())
                {
                    return curUnit->isHoldingPosition() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isMoving() != bestSoFarUnit->isMoving())
                {
                    return !curUnit->isMoving() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isBraking() != bestSoFarUnit->isBraking())
                {
                    if (curUnit->isMoving() && bestSoFarUnit->isMoving())
                    {
                        return curUnit->isBraking() ? curUnit : bestSoFarUnit;
                    }
                    else if (!curUnit->isMoving() && !bestSoFarUnit->isMoving())
                    {
                        return !curUnit->isBraking() ? curUnit : bestSoFarUnit;
                    }
                }

                if (curUnit->isAccelerating() != bestSoFarUnit->isAccelerating())
                {
                    if (curUnit->isMoving() && bestSoFarUnit->isMoving())
                    {
                        return !curUnit->isAccelerating() ? curUnit : bestSoFarUnit;
                    }
                    else if (!curUnit->isMoving() && !bestSoFarUnit->isMoving())
                    {
                        return !curUnit->isAccelerating() ? curUnit : bestSoFarUnit;
                    }
                }

                // Prefer to attack enemy units that are morphing. Assume here that armor has already taken into account properly above.
                if (curUnit->isMorphing() != bestSoFarUnit->isMorphing())
                {
                    return curUnit->isMorphing() ? curUnit : bestSoFarUnit;
                }

                // Prefer to attack enemy units that are being constructed.
                if (curUnit->isBeingConstructed() != bestSoFarUnit->isBeingConstructed())
                {
                    return curUnit->isBeingConstructed() ? curUnit : bestSoFarUnit;
                }

                // Prefer to attack enemy units that are incomplete.
                if (curUnit->isCompleted() != bestSoFarUnit->isCompleted())
                {
                    return !curUnit->isCompleted() ? curUnit : bestSoFarUnit;
                }

                // Prefer to attack bunkers.
                // Note: getType()->canAttack() is false for a bunker.
                if ((curUnitType == BWAPI::UnitTypes::Terran_Bunker || bestSoFarUnitType == BWAPI::UnitTypes::Terran_Bunker) &&
                    curUnitType != bestSoFarUnitType)
                {
                    return curUnitType == BWAPI::UnitTypes::Terran_Bunker ? curUnit : bestSoFarUnit;
                }

                // Prefer to attack enemy units that can attack.
                if (curUnitType.canAttack() != bestSoFarUnitType.canAttack())
                {
                    return curUnitType.canAttack() ? curUnit : bestSoFarUnit;
                }

                // Prefer to attack workers.
                if (curUnitType.isWorker() != bestSoFarUnitType.isWorker())
                {
                    return curUnitType.isWorker() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isCarryingGas() != bestSoFarUnit->isCarryingGas())
                {
                    return curUnit->isCarryingGas() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isCarryingMinerals() != bestSoFarUnit->isCarryingMinerals())
                {
                    return curUnit->isCarryingMinerals() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isGatheringMinerals() != bestSoFarUnit->isGatheringMinerals())
                {
                    return curUnit->isGatheringMinerals() ? curUnit : bestSoFarUnit;
                }

                // For now, let's prefer to attack mineral gatherers than gas gatherers,
                // because gas gatherers generally take longer to kill because they keep
                // going into the refinery/assimilator/extractor.
                if (curUnit->isGatheringGas() != bestSoFarUnit->isGatheringGas())
                {
                    return curUnit->isGatheringGas() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->getPowerUp() != bestSoFarUnit->getPowerUp())
                {
                    if (bestSoFarUnit->getPowerUp() == nullptr)
                    {
                        return curUnit;
                    }
                    else if (curUnit->getPowerUp() == nullptr)
                    {
                        return bestSoFarUnit;
                    }
                }

                if (curUnit->isBlind() != bestSoFarUnit->isBlind())
                {
                    return !curUnit->isBlind() ? curUnit : bestSoFarUnit;
                }

                if ((curUnitType == BWAPI::UnitTypes::Protoss_Carrier || curUnitType == UnitTypes::Hero_Gantrithor) &&
                    (bestSoFarUnitType == BWAPI::UnitTypes::Protoss_Carrier || bestSoFarUnitType == UnitTypes::Hero_Gantrithor) &&
                    curUnit->getInterceptorCount() != bestSoFarUnit->getInterceptorCount())
                {
                    return curUnit->getInterceptorCount() > bestSoFarUnit->getInterceptorCount() ? curUnit : bestSoFarUnit;
                }

                if (u->getDistance(curUnit) != u->getDistance(bestSoFarUnit))
                {
                    return (u->getDistance(curUnit) < u->getDistance(bestSoFarUnit)) ? curUnit : bestSoFarUnit;
                }

                if (curUnit->getAcidSporeCount() != bestSoFarUnit->getAcidSporeCount())
                {
                    return curUnit->getAcidSporeCount() < bestSoFarUnit->getAcidSporeCount() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->getKillCount() != bestSoFarUnit->getKillCount())
                {
                    return curUnit->getKillCount() < bestSoFarUnit->getKillCount() ? curUnit : bestSoFarUnit;
                }

                if (curUnit->isIdle() != bestSoFarUnit->isIdle())
                {
                    return !curUnit->isIdle() ? curUnit : bestSoFarUnit;
                }

                // TODO: The meaning of isUnderAttack() is more like  "was attacked recently" and from the forums it sounds
                // like it is a GUI thing and affected by the real clock (not the in-game clock) so if games are played at
                // high speed it is misleading, but let's check it anyway as lowest priority until I can come up with more
                // reliable logic. Could also check whether any of our other units are targeting it (if that info is
                // accessible).
                if (curUnit->isUnderAttack() != bestSoFarUnit->isUnderAttack())
                {
                    return curUnit->isUnderAttack() ? curUnit : bestSoFarUnit;
                }

                return bestSoFarUnit;
            };

        const BWAPI::UnitType airForceUnitType = BWAPI::UnitTypes::Zerg_Mutalisk;

        if (u->getType() == airForceUnitType.whatBuilds().first)
        {
            if ((allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] > 0 ||
                 Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) == 0) &&
                allUnitCount[airForceUnitType] <= (isMutaRushBuildOrder ? 40 : 12))
            {
                // Train more air combat units.
                if ((u->getType() == UnitTypes::Zerg_Larva || u->getTrainingQueue().size() < 2) && noCmdPending(u))
                {
                    if (u->canTrain(airForceUnitType))
                    {
                        u->train(airForceUnitType);
                        continue;
                    }
                }
            }
        }

        const BWAPI::UnitType workerUnitType = Broodwar->self()->getRace().getWorker();

        if (u->getType().isWorker())
        {
            // Attack enemy units of opportunity (e.g. enemy worker scout(s) that are harassing my gatherers).
            // Don't issue a new command if we are a low life drone planning to build an extractor.
            if ((u != lowLifeDrone || u != extractorBuilder) &&
                (u->isIdle() || u->getLastCommand().getType() == BWAPI::UnitCommandTypes::None ||
                 Broodwar->getFrameCount() >= u->getLastCommandFrame() + 2 - (Broodwar->getLatencyFrames() > 2 ? u->getLastCommandFrame() % 2 : 0)))
            {
                // Add some frames to cover frame(s) that might be needed to change direction.
                if (u->getGroundWeaponCooldown() <= Broodwar->getRemainingLatencyFrames() + 2)
                {
                    const BWAPI::Unit bestAttackableEnemyNonBuildingUnit =
                        workerAttackTargetUnit != nullptr ?
                        workerAttackTargetUnit :
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists &&
                            // Ignore buildings because we do not want to waste mining time, and I don't think we need
                            // to worry about manner pylon or gas steal because the current 4pool-only version in theory shouldn't
                            // place workers where they can get stuck by a manner pylon on most maps, and gas steal is
                            // rarely much of a hinderance except on large maps because we need lots of lings to be in a
                            // situation to use the extractor trick (it just stops us healing drones with the extractor trick).
                            // The lings will attack buildings near my base when they spawn anyway.
                            !IsBuilding &&
                            [&u](Unit& tmpUnit) { return u->isInWeaponRange(tmpUnit) && u->canAttack(PositionOrUnit(tmpUnit)); },
                            u->getPosition(),
                            std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()));
    
                    if (bestAttackableEnemyNonBuildingUnit && u->canAttack(PositionOrUnit(bestAttackableEnemyNonBuildingUnit)))
                    {
                        const BWAPI::Unit oldOrderTarget = u->getTarget();
                        if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableEnemyNonBuildingUnit)
                        {
                            u->attack(bestAttackableEnemyNonBuildingUnit);
    
                            if (gathererToResourceMap.find(u) != gathererToResourceMap.end() && resourceToGathererMap.find(gathererToResourceMap.at(u)) != resourceToGathererMap.end() && resourceToGathererMap.at(gathererToResourceMap.at(u)) == u)
                            {
                                resourceToGathererMap.erase(gathererToResourceMap.at(u));
                            }
    
                            gathererToResourceMap.erase(u);
                        }

                        continue;
                    }
                }

                // Don't issue a return cargo or gather command if we are a scouting worker or a drone planning to build a building.
                if (u != extractorBuilder && u != groundArmyBuildingBuilder && u->getLastCommand().getType() != BWAPI::UnitCommandTypes::Build)
                {
                    // If idle or were targeting an enemy unit or are no longer carrying minerals...
                    const bool isNewCmdNeeded = u->isIdle() || (u->getTarget() && u->getTarget()->getPlayer() && u->getTarget()->getPlayer()->isEnemy(Broodwar->self()));
                    if (isNewCmdNeeded ||
                        (!u->isCarryingMinerals() && (int) u->getClientInfo(wasJustCarryingMineralsInd) == wasJustCarryingMineralsTrueVal))
                    {
                        if (!u->isCarryingMinerals() && (int) u->getClientInfo(wasJustCarryingMineralsInd) == wasJustCarryingMineralsTrueVal)
                        {
                            // Reset indicator about carrying minerals because we aren't carrying minerals now.
                            // Note: setClientInfo may also be called at the end of this and some other frames
                            // (but not necessarily at the end of all frames because there's logic at the start
                            // of each frame to return if the frame count modulo is a certain value).
                            u->setClientInfo(wasJustCarryingMineralsDefaultVal, wasJustCarryingMineralsInd);
                            u->setClientInfo(Broodwar->getFrameCount(), frameLastReturnedMineralsInd);
                        }

                        if (u != scoutingWorker || (int) u->getClientInfo(frameLastReturnedMineralsInd) == 0)
                        {
                            // Order workers carrying a resource to return them to the center,
                            // otherwise find a mineral patch to harvest.
                            if (isNewCmdNeeded &&
                                (u->isCarryingGas() || u->isCarryingMinerals()))
                            {
                                if (u->canReturnCargo())
                                {
                                    if (u->getLastCommand().getType() != BWAPI::UnitCommandTypes::Return_Cargo)
                                    {
                                        u->returnCargo();
                                    }
        
                                    continue;
                                }
                            }
                            // The worker cannot harvest anything if it is carrying a powerup such as a flag.
                            else if (!u->getPowerUp())
                            {
                                if (u->canGather())
                                {
                                    myFreeGatherers.insert(u);
                                }
                            }
                        }
                    }
                }
            }

            if (u != scoutingWorker || (int) u->getClientInfo(frameLastReturnedMineralsInd) == 0)
            {
                continue;
            }
            else
            {
                isScoutingWorkerReadyToScout = true;
            }
        }
        else if (u->getType() == workerUnitType.whatBuilds().first)
        {
            // Train more workers if we have less than 3 (or 6 against enemy worker rush until pool is building), or needed late-game.
            // Note: one of the workers could currently be doing the extractor trick.
            // Note: using allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] rather than incompleteUnitCount[BWAPI::UnitTypes::Zerg_Extractor]
            // because BWAPI seems to think it is completed.
            if ((allUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] == 0 &&
                 // If we have lost drones to enemy worker rush then keep adding a few extra drones until they start to pop.
                 ((Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) > (isScoutingWorkerReadyToScout ? 1 : 0) &&
                   allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] < 6 &&
                   myCompletedWorkers.size() + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] < 4) ||
                  allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] < 4)) ||
                (Broodwar->self()->completedUnitCount(BWAPI::UnitTypes::Zerg_Spawning_Pool) > 0 &&
                 (allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] < 3)) ||
                (allUnitCount[BWAPI::UnitTypes::Zerg_Spawning_Pool] > 0 &&
                 (isScoutingUsingWorker && unscoutedOtherStartLocs.size() > 1 && isNeedScoutingWorker && isNeedToMorphScoutingWorker)) ||
                ((Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh || supplyUsed >= 60) &&
                 // Save larvae while spire is being morphed so have some larvae available for mutalisks when it finishes.
                 // TODO: this might not count the worker currently inside the extractor.
                 allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame < ((isSpeedlingBuildOrder && allUnitCount[BWAPI::UnitTypes::Zerg_Lair] + allUnitCount[BWAPI::UnitTypes::Zerg_Hive] == 0) ? 9 : ((allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame <= 12 || Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) > 0 || !isMutaRushBuildOrder || incompleteUnitCount[BWAPI::UnitTypes::Zerg_Spire] != 1 || allUnitCount[BWAPI::UnitTypes::Zerg_Spire] + allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] != 1 || spireRemainingBuildTime > 1000) ? 14 : 12))))
            {
                if ((u->getType() == UnitTypes::Zerg_Larva || u->getTrainingQueue().size() < 2) && noCmdPending(u))
                {
                    if (u->canTrain(workerUnitType))
                    {
                        u->train(workerUnitType);
                        ++numWorkersTrainedThisFrame;
                        isNeedToMorphScoutingWorker = false;
                        continue;
                    }
                }
            }
        }
        else if (u->getType() == BWAPI::UnitTypes::Zerg_Hatchery)
        {
            // Morph to lair late-game.
            static bool issuedMorphLairCmd = false;
            if (u->canMorph(BWAPI::UnitTypes::Zerg_Lair) &&
                allUnitCount[BWAPI::UnitTypes::Zerg_Lair] + allUnitCount[BWAPI::UnitTypes::Zerg_Hive] == 0 &&
                (!isSpeedlingBuildOrder || isStartedTransitioning))
            {
                u->morph(BWAPI::UnitTypes::Zerg_Lair);
                issuedMorphLairCmd = true;
                continue;
            }
        }
        else if (u->getType() == BWAPI::UnitTypes::Zerg_Creep_Colony)
        {
            // Morph to sunken late-game.
            static bool issuedMorphSunkenColonyCmd = false;
            if (u->canMorph(BWAPI::UnitTypes::Zerg_Sunken_Colony) && allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame >= 1)
            {
                u->morph(BWAPI::UnitTypes::Zerg_Sunken_Colony);
                issuedMorphSunkenColonyCmd = true;
                continue;
            }
        }
        else if (u->getType() == BWAPI::UnitTypes::Zerg_Lair)
        {
            // Morph to hive late-game.
            static bool issuedMorphHiveCmd = false;
            if (u->canMorph(BWAPI::UnitTypes::Zerg_Hive) && allUnitCount[BWAPI::UnitTypes::Zerg_Hive] == 0)
            {
                u->morph(BWAPI::UnitTypes::Zerg_Hive);
                issuedMorphHiveCmd = true;
                continue;
            }
        }
        else if (u->getType() == BWAPI::UnitTypes::Zerg_Spire)
        {
            // Morph to greater spire late-game.
            static bool issuedMorphGreaterSpireCmd = false;
            if (u->canMorph(BWAPI::UnitTypes::Zerg_Greater_Spire) && allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] == 0)
            {
                u->morph(BWAPI::UnitTypes::Zerg_Greater_Spire);
                issuedMorphGreaterSpireCmd = true;
                continue;
            }
        }
        else if (u->getType() == BWAPI::UnitTypes::Zerg_Mutalisk)
        {
            // Morph a limited number of guardians late-game.
            // Not until at least one mutalisk has died though (because mutalisks may be all we need,
            // e.g. against lifted buildings or an enemy that doesn't get any anti-air).
            if (u->canMorph(BWAPI::UnitTypes::Zerg_Guardian) && allUnitCount[UnitTypes::Zerg_Guardian] <= 8 &&
                Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) > 0)
            {
                u->morph(BWAPI::UnitTypes::Zerg_Guardian);
                continue;
            }
        }

        if (u->getType() == groundArmyUnitType.whatBuilds().first)
        {
            // Train more ground combat units.
            if (((Broodwar->getFrameCount() < transitionOutOfFourPoolFrameCountThresh &&
                  ((numSunkens > 0 && allUnitCount[UnitTypes::Zerg_Creep_Colony] + allUnitCount[UnitTypes::Zerg_Sunken_Colony] > 0) ||
                   !(isSpeedlingBuildOrder ? (myCompletedWorkers.size() >= 6 && Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Zergling) > 10) : (myCompletedWorkers.size() >= 3 && Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Zergling) > 14)))) ||
                 (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh &&
                  (((completedUnitCount[UnitTypes::Zerg_Ultralisk_Cavern] == 0 &&
                     (Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) > 0 ||
                      !isMutaRushBuildOrder ||
                      allUnitCount[BWAPI::UnitTypes::Zerg_Spire] + allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] != 1)) ||
                    allUnitCount[UnitTypes::Zerg_Ultralisk] >= 2) &&
                   allUnitCount[groundArmyUnitType] <= 30))) &&
                ((u->getType() == UnitTypes::Zerg_Larva || u->getTrainingQueue().size() < 2) && noCmdPending(u)))
            {
                if (u->canTrain(groundArmyUnitType))
                {
                    u->train(groundArmyUnitType);
                    continue;
                }
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Hydralisk.whatBuilds().first)
        {
            // Train more hydralisk units.
            if (allUnitCount[UnitTypes::Zerg_Guardian] >= 8 &&
                allUnitCount[BWAPI::UnitTypes::Zerg_Hydralisk] <= 20 &&
                noCmdPending(u))
            {
                if (u->canTrain(BWAPI::UnitTypes::Zerg_Hydralisk))
                {
                    u->train(BWAPI::UnitTypes::Zerg_Hydralisk);
                    continue;
                }
            }
        }

        if (u->getType() == BWAPI::UnitTypes::Zerg_Ultralisk.whatBuilds().first)
        {
            // Train more ultralisk units.
            if (allUnitCount[UnitTypes::Zerg_Guardian] >= 8 &&
                allUnitCount[BWAPI::UnitTypes::Zerg_Ultralisk] <= 6 &&
                noCmdPending(u))
            {
                if (u->canTrain(BWAPI::UnitTypes::Zerg_Ultralisk))
                {
                    u->train(BWAPI::UnitTypes::Zerg_Ultralisk);
                    continue;
                }
            }
        }

        // A resource depot is a Command Center, Nexus, or Hatchery/Lair/Hive.
        if (u->getType().isResourceDepot())
        {
            const UnitType supplyProviderType = u->getType().getRace().getSupplyProvider();
            // Commented out because for 4pool we probably shouldn't ever make overlords
            // cos we want all available larvae available to replenish ling count if ling(s) die.
            // We could use the amount of larvae available as a threshold but there is a risk many
            // lings could soon die and we wouldn't have any larvae available to re-make them.
            //if (incompleteUnitCount[supplyProviderType] == 0 &&
            //    ((Broodwar->getFrameCount() < transitionOutOfFourPoolFrameCountThresh && supplyUsed >= Broodwar->self()->supplyTotal()) ||
            //     (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh && Broodwar->self()->supplyTotal() < 400)))
            if ((Broodwar->getFrameCount() < transitionOutOfFourPoolFrameCountThresh &&
                 Broodwar->self()->supplyTotal() + (incompleteUnitCount[supplyProviderType] * supplyProviderType.supplyProvided()) < 18) ||
                (Broodwar->getFrameCount() >= transitionOutOfFourPoolFrameCountThresh &&
                 Broodwar->self()->supplyTotal() + (incompleteUnitCount[supplyProviderType] * supplyProviderType.supplyProvided()) < 400 &&
                 supplyUsed + (((allUnitCount[BWAPI::UnitTypes::Zerg_Hatchery] + allUnitCount[BWAPI::UnitTypes::Zerg_Lair] + allUnitCount[BWAPI::UnitTypes::Zerg_Hive]) * ((Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) == 0 && isMutaRushBuildOrder && incompleteUnitCount[BWAPI::UnitTypes::Zerg_Spire] > 0 && allUnitCount[BWAPI::UnitTypes::Zerg_Spire] + allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] == 1) ? 3 : 1) + 1) * (allUnitCount[BWAPI::UnitTypes::Zerg_Ultralisk_Cavern] > 0 ? BWAPI::UnitTypes::Zerg_Ultralisk.supplyRequired() : (allUnitCount[BWAPI::UnitTypes::Zerg_Spire] + allUnitCount[BWAPI::UnitTypes::Zerg_Greater_Spire] + allUnitCount[BWAPI::UnitTypes::Zerg_Defiler_Mound] + allUnitCount[BWAPI::UnitTypes::Zerg_Queens_Nest] + allUnitCount[BWAPI::UnitTypes::Zerg_Hydralisk_Den] > 0 ? BWAPI::UnitTypes::Zerg_Mutalisk.supplyRequired() : BWAPI::UnitTypes::Zerg_Drone.supplyRequired()))) > Broodwar->self()->supplyTotal() + (incompleteUnitCount[supplyProviderType] * supplyProviderType.supplyProvided()) &&
                 (isStartedTransitioning || (supplyUsed + 2 > Broodwar->self()->supplyTotal() + (incompleteUnitCount[supplyProviderType] * supplyProviderType.supplyProvided())))))
            {
                static int lastIssuedBuildSupplyProviderCmd = 0;
                if (Broodwar->getFrameCount() >= lastIssuedBuildSupplyProviderCmd + (10 * 24))
                {
                    // Retrieve a unit that is capable of constructing the supply needed
                    Unit supplyBuilder = u->getClosestUnit(GetType == supplyProviderType.whatBuilds().first && (IsIdle || IsGatheringMinerals) && IsOwned);
                    // If a unit was found
                    if (supplyBuilder)
                    {
                        if (supplyProviderType.isBuilding())
                        {
                            const TilePosition targetBuildLoc = Broodwar->getBuildLocation(supplyProviderType, supplyBuilder->getTilePosition());
                            if (targetBuildLoc && supplyBuilder->canBuild(supplyProviderType, targetBuildLoc))
                            {
                                // Order the builder to construct the supply structure
                                supplyBuilder->build(supplyProviderType, targetBuildLoc);
                                lastIssuedBuildSupplyProviderCmd = Broodwar->getFrameCount();
                                continue;
                            }
                        }
                        else if (supplyBuilder->canTrain(supplyProviderType))
                        {
                            // Train the supply provider (Zerg_Overlord) if the provider is not a structure
                            supplyBuilder->train(supplyProviderType);
                            lastIssuedBuildSupplyProviderCmd = Broodwar->getFrameCount();
                            continue;
                        }
                    }
                }
            }
        }
        // Attempt to detect and fix bugged (frozen) ground units caused by bug in Broodwar.
        // TODO: improve this to speed up detection/fix.
        else if (u->canStop() &&
                 u->canAttack() &&
                 u->canMove() &&
                 !u->isFlying() &&
                 !u->isAttacking() &&
                 (int) u->getClientInfo(frameLastStoppedInd) + (3 * 24) < Broodwar->getFrameCount() &&
                 (int) u->getClientInfo(frameLastAttackingInd) + std::max(Broodwar->self()->weaponDamageCooldown(u->getType()), u->getType().airWeapon().damageCooldown()) + (3 * 24) < Broodwar->getFrameCount() &&
                 (int) u->getClientInfo(frameLastChangedPosInd) > 0 && (int) u->getClientInfo(frameLastChangedPosInd) + (3 * 24) < Broodwar->getFrameCount() &&
                 noCmdPending(u))
        {
            u->stop();
            u->setClientInfo(Broodwar->getFrameCount(), frameLastStoppedInd);
            continue;
        }
        else if (u->canAttack() &&
                 !u->isAttackFrame() &&
                 noCmdPending(u))
        {
            // I.E. in-range enemy unit that is a threat to this particular unit
            // (so for example, an enemy zergling is not a threat to my mutalisk).
            const BWAPI::Unit bestAttackableInRangeEnemySelfThreatUnit =
                // Could also take into account higher ground advantage, cover advantage (e.g. in trees), HP regen, shields regen,
                // effects of spells like dark swarm. The list is endless.
                Broodwar->getBestUnit(
                    getBestEnemyThreatUnitLambda,
                    IsEnemy && IsVisible && IsDetected && Exists &&
                    !IsWorker &&
                    // Warning: some calls like tmpUnit->canAttack(PositionOrUnit(tmpUnit2)) and tmpUnit2->isVisible(tmpUnit->getPlayer())
                    // will always return false because tmpUnit is not commandable by Broodwar->self() and BWAPI doesn't seem to update
                    // unit visibility info correctly for other players than Broodwar->self().
                    // I check !IsLockedDown etc becuase rather than attacking them we would rather fall through and attack workers if possible.
                    !IsLockedDown && !IsMaelstrommed && !IsStasised &&
                    (CanAttack ||
                     GetType == BWAPI::UnitTypes::Terran_Bunker ||
                     GetType == BWAPI::UnitTypes::Protoss_High_Templar ||
                     GetType == BWAPI::UnitTypes::Zerg_Defiler ||
                     GetType == BWAPI::UnitTypes::Protoss_Dark_Archon ||
                     GetType == BWAPI::UnitTypes::Terran_Science_Vessel ||
                     GetType == BWAPI::UnitTypes::Zerg_Queen ||
                     GetType == BWAPI::UnitTypes::Protoss_Shuttle ||
                     GetType == BWAPI::UnitTypes::Terran_Dropship ||
                     // TODO: re-enable Protoss_Observer after add any logic to produce cloaked units. It could also be used for scouting but never mind.
                     //GetType == BWAPI::UnitTypes::Protoss_Observer ||
                     // TODO: re-enable Zerg_Overlord after add any logic to produce cloaked units. It could also be used for scouting and transport but never mind.
                     //GetType == BWAPI::UnitTypes::Zerg_Overlord ||
                     GetType == BWAPI::UnitTypes::Terran_Medic ||
                     GetType == BWAPI::UnitTypes::Terran_Nuclear_Silo ||
                     GetType == BWAPI::UnitTypes::Zerg_Nydus_Canal /*||
                     // TODO: re-enable Terran_Comsat_Station after add any
                     // logic to produce cloaked units.
                     GetType == BWAPI::UnitTypes::Terran_Comsat_Station*/) &&
                    [&u](Unit& tmpUnit)
                    {
                        return
                            u->canAttack(PositionOrUnit(tmpUnit)) &&
                            u->isInWeaponRange(tmpUnit) &&
                            // TODO: add special logic for zerglings.
                            (tmpUnit->getType() != BWAPI::UnitTypes::Terran_Bunker ||
                             u->getType() != BWAPI::UnitTypes::Zerg_Zergling) &&
                            (!tmpUnit->getType().canAttack() ||
                             (!u->isFlying() ? tmpUnit->getType().groundWeapon() : tmpUnit->getType().airWeapon()) != BWAPI::WeaponTypes::None);
                    },
                    u->getPosition(),
                    std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()), Broodwar->self()->weaponMaxRange(u->getType().airWeapon())));

            if (bestAttackableInRangeEnemySelfThreatUnit)
            {
                const BWAPI::Unit oldOrderTarget = u->getTarget();
                if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableInRangeEnemySelfThreatUnit)
                {
                    u->attack(bestAttackableInRangeEnemySelfThreatUnit);
                }
                continue;
            }

            // I.E. a nearby enemy unit that is a threat to this particular unit
            // (so for example, an enemy zergling is not a threat to my mutalisk).
            const BWAPI::Unit bestAttackableEnemySelfThreatUnit =
                // Could also take into account higher ground advantage, cover advantage (e.g. in trees), HP regen, shields regen,
                // effects of spells like dark swarm. The list is endless.
                Broodwar->getBestUnit(
                    getBestEnemyThreatUnitLambda,
                    IsEnemy && IsVisible && IsDetected && Exists &&
                    !IsWorker &&
                    // Warning: some calls like tmpUnit->canAttack(PositionOrUnit(tmpUnit2)) and tmpUnit2->isVisible(tmpUnit->getPlayer())
                    // will always return false because tmpUnit is not commandable by Broodwar->self() and BWAPI doesn't seem to update
                    // unit visibility info correctly for other players than Broodwar->self().
                    // I check !IsLockedDown etc becuase rather than attacking them we would rather fall through and attack workers if possible.
                    !IsLockedDown && !IsMaelstrommed && !IsStasised &&
                    (CanAttack ||
                     GetType == BWAPI::UnitTypes::Terran_Bunker ||
                     GetType == BWAPI::UnitTypes::Protoss_High_Templar ||
                     GetType == BWAPI::UnitTypes::Zerg_Defiler ||
                     GetType == BWAPI::UnitTypes::Protoss_Dark_Archon ||
                     GetType == BWAPI::UnitTypes::Terran_Science_Vessel ||
                     GetType == BWAPI::UnitTypes::Zerg_Queen ||
                     GetType == BWAPI::UnitTypes::Protoss_Shuttle ||
                     GetType == BWAPI::UnitTypes::Terran_Dropship ||
                     // TODO: re-enable Protoss_Observer after add any logic to produce cloaked units. It could also be used for scouting but never mind.
                     //GetType == BWAPI::UnitTypes::Protoss_Observer ||
                     // TODO: re-enable Zerg_Overlord after add any logic to produce cloaked units. It could also be used for scouting and transport but never mind.
                     //GetType == BWAPI::UnitTypes::Zerg_Overlord ||
                     GetType == BWAPI::UnitTypes::Terran_Medic ||
                     GetType == BWAPI::UnitTypes::Terran_Nuclear_Silo ||
                     GetType == BWAPI::UnitTypes::Zerg_Nydus_Canal /*||
                     // TODO: re-enable Terran_Comsat_Station after add any
                     // logic to produce cloaked units.
                     GetType == BWAPI::UnitTypes::Terran_Comsat_Station*/) &&
                    [&u](Unit& tmpUnit)
                    {
                        return
                            u->canAttack(PositionOrUnit(tmpUnit)) &&
                            // TODO: add special logic for zerglings.
                            (tmpUnit->getType() != BWAPI::UnitTypes::Terran_Bunker ||
                             (u->getType() != BWAPI::UnitTypes::Zerg_Zergling &&
                              // Ignore ghosts long range for now - assume there are marine(s) in the bunker.
                              // Only attack if we are in the bunker's range or we can out-range the bunker.
                              (tmpUnit->getDistance(u) <= tmpUnit->getPlayer()->weaponMaxRange(BWAPI::UnitTypes::Terran_Marine.groundWeapon()) ||
                               u->getPlayer()->weaponMaxRange(u->getType().groundWeapon()) > tmpUnit->getPlayer()->weaponMaxRange(BWAPI::UnitTypes::Terran_Marine.groundWeapon())))) &&
                            ((!tmpUnit->getType().canAttack() ||
                              (!u->isFlying() ? tmpUnit->getType().groundWeapon() : tmpUnit->getType().airWeapon()) != BWAPI::WeaponTypes::None) &&
                             tmpUnit->getDistance(u) <= (int) (std::max(std::max(tmpUnit->getPlayer()->weaponMaxRange(!u->isFlying() ? tmpUnit->getType().groundWeapon() : tmpUnit->getType().airWeapon()),
                                                                                 u->getPlayer()->weaponMaxRange(!tmpUnit->isFlying() ? u->getType().groundWeapon() : u->getType().airWeapon())),
                                                                        112)
                                                               + 32) &&
                             tmpUnit->getClosestUnit(
                                 Exists && GetPlayer == Broodwar->self(),
                                 (int) (std::max(std::max((!u->isFlying() ? tmpUnit->getPlayer()->weaponMaxRange(tmpUnit->getType().groundWeapon()) : tmpUnit->getPlayer()->weaponMaxRange(tmpUnit->getType().airWeapon())),
                                                          (!tmpUnit->isFlying() ? u->getPlayer()->weaponMaxRange(u->getType().groundWeapon()) : u->getPlayer()->weaponMaxRange(u->getType().airWeapon()))),
                                                 112))) != nullptr);
                    },
                    u->getPosition(),
                    // Note: 384 is the max range of any weapon (i.e. siege tank's weapon).
                    // FYI, the max sight range of any unit is 352, and the max seek range of any unit is 288.
                    std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + 384 + 112 + 32);

            if (bestAttackableEnemySelfThreatUnit)
            {
                const BWAPI::Unit oldOrderTarget = u->getTarget();
                if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableEnemySelfThreatUnit)
                {
                    u->attack(bestAttackableEnemySelfThreatUnit);
                }
                continue;
            }

            // Attack enemy worker targets of opportunity.
            const BWAPI::Unit bestAttackableInRangeEnemyWorkerUnit =
                Broodwar->getBestUnit(
                    getBestEnemyThreatUnitLambda,
                    IsEnemy && IsVisible && IsDetected && Exists && IsWorker &&
                    [&u](Unit& tmpUnit) { return u->canAttack(PositionOrUnit(tmpUnit)) && u->isInWeaponRange(tmpUnit); },
                    u->getPosition(),
                    std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()), Broodwar->self()->weaponMaxRange(u->getType().airWeapon())));

            if (bestAttackableInRangeEnemyWorkerUnit)
            {
                const BWAPI::Unit oldOrderTarget = u->getTarget();
                if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableInRangeEnemyWorkerUnit)
                {
                    u->attack(bestAttackableInRangeEnemyWorkerUnit);
                }
                continue;
            }

            // Defend base if necessary, e.g. against worker rush, but base race rather than defend
            // if we have no workers left.
            if (allUnitCount[BWAPI::UnitTypes::Zerg_Drone] + numWorkersTrainedThisFrame + allUnitCount[BWAPI::UnitTypes::Zerg_Extractor] > 0)
            {
                BWAPI::Unit defenceAttackTargetUnit = nullptr;
                if (shouldDefend && workerAttackTargetUnit && u->canAttack(PositionOrUnit(workerAttackTargetUnit)))
                {
                    defenceAttackTargetUnit = workerAttackTargetUnit;
                }
                else if (Broodwar->self()->deadUnitCount(BWAPI::UnitTypes::Zerg_Drone) > (isScoutingWorkerReadyToScout ? 1 : 0) &&
                         mainBase != nullptr)
                {
                    // Defend my base (even if have to return all the way to my base) if my workers or a building
                    // are threatened e.g. by an enemy worker rush.
                    defenceAttackTargetUnit =
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists &&
                            CanAttack &&
                            !IsBuilding &&
                            [&u](Unit& tmpUnit)
                            {
                                return u->canAttack(PositionOrUnit(tmpUnit));
                            },
                            mainBase->getPosition(),
                            896);
                }
    
                if (defenceAttackTargetUnit && u->canAttack(PositionOrUnit(defenceAttackTargetUnit)) &&
                    ((Broodwar->getFrameCount() < transitionOutOfFourPoolFrameCountThresh && supplyUsed < 60) || u->getDistance(defenceAttackTargetUnit) < 896))
                {
                    const BWAPI::Unit oldOrderTarget = u->getTarget();
                    if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != defenceAttackTargetUnit)
                    {
                        u->attack(defenceAttackTargetUnit);
                    }
                    continue;
                }
            }

            // Continue statement to avoid sending out mutalisks if we are making guardians and
            // don't have enough guardians yet, because we don't want to kamikaze the mutalisks.
            if (u->getType() == BWAPI::UnitTypes::Zerg_Mutalisk &&
                allUnitCount[UnitTypes::Zerg_Guardian] <= 8 &&
                Broodwar->self()->deadUnitCount(UnitTypes::Zerg_Mutalisk) > 0 &&
                (!mainBaseAuto ||
                 u->getDistance(mainBaseAuto) < 512))
            {
                continue;
            }

            // Attack enemy lifted buildings.
            if (u->getType().airWeapon() != BWAPI::WeaponTypes::None)
            {
                const BWAPI::Unit closestAttackableEnemyLiftedBuildingUnit =
                    u->getClosestUnit(
                        IsEnemy && IsVisible && Exists && IsLifted &&
                        [&u](Unit& tmpUnit) { return u->canAttack(PositionOrUnit(tmpUnit)); } );

                if (closestAttackableEnemyLiftedBuildingUnit)
                {
                    const BWAPI::Unit oldOrderTarget = u->getTarget();
                    if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != closestAttackableEnemyLiftedBuildingUnit)
                    {
                        u->attack(closestAttackableEnemyLiftedBuildingUnit);
                    }
                    continue;
                }
            }

            // We ignore stolen gas, at least until a time near when we plan to make an extractor.
            const Unit closestEnemyUnliftedBuildingAnywhere =
                u->getClosestUnit(
                    IsEnemy && IsVisible && Exists && IsBuilding && !IsLifted &&
                    isNotStolenGas);

            const BWAPI::Position closestEnemyUnliftedBuildingAnywherePos =
                closestEnemyUnliftedBuildingAnywhere ? closestEnemyUnliftedBuildingAnywhere->getPosition() : BWAPI::Positions::Unknown;

            if (closestEnemyUnliftedBuildingAnywhere)
            {
                // Distance multiplier is arbitrary - the value seems to result in ok movement behaviour.
                if (u->getDistance(closestEnemyUnliftedBuildingAnywhere) <=
                    (int) (std::max(std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()),
                                             Broodwar->self()->weaponMaxRange(u->getType().airWeapon())), 256) * 1))
                {
                    const BWAPI::Unit bestAttackableEnemyWorkerUnit =
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists && IsWorker &&
                            [&u, &closestEnemyUnliftedBuildingAnywhere](Unit& tmpUnit)
                            {
                                return u->canAttack(PositionOrUnit(tmpUnit)) &&
                                    tmpUnit->getDistance(u) <= (int) (224 + 32) &&
                                    tmpUnit->getDistance(closestEnemyUnliftedBuildingAnywhere) <= Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()) + 224 &&
                                    tmpUnit->getClosestUnit(Exists && GetPlayer == Broodwar->self(), (int) (224)) != nullptr;
                            },
                            u->getPosition(),
                            std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + 224 + 32);

                    if (bestAttackableEnemyWorkerUnit)
                    {
                        const BWAPI::Unit oldOrderTarget = u->getTarget();
                        if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableEnemyWorkerUnit)
                        {
                            u->attack(bestAttackableEnemyWorkerUnit);
                        }
                        continue;
                    }

                    const BWAPI::Unit bestAttackableInRangeEnemyTacticalUnit =
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists &&
                            !IsWorker &&
                            (CanAttack ||
                             GetType == BWAPI::UnitTypes::Terran_Bunker ||
                             GetType == BWAPI::UnitTypes::Protoss_High_Templar ||
                             GetType == BWAPI::UnitTypes::Zerg_Defiler ||
                             GetType == BWAPI::UnitTypes::Protoss_Dark_Archon ||
                             GetType == BWAPI::UnitTypes::Terran_Science_Vessel ||
                             GetType == BWAPI::UnitTypes::Zerg_Queen ||
                             GetType == BWAPI::UnitTypes::Protoss_Shuttle ||
                             GetType == BWAPI::UnitTypes::Terran_Dropship ||
                             // TODO: re-enable Protoss_Observer after add any logic to produce cloaked units. It could also be used for scouting but never mind.
                             //GetType == BWAPI::UnitTypes::Protoss_Observer ||
                             // TODO: re-enable Zerg_Overlord after add any logic to produce cloaked units. It could also be used for scouting and transport but never mind.
                             //GetType == BWAPI::UnitTypes::Zerg_Overlord ||
                             GetType == BWAPI::UnitTypes::Terran_Medic ||
                             GetType == BWAPI::UnitTypes::Terran_Nuclear_Silo ||
                             GetType == BWAPI::UnitTypes::Zerg_Nydus_Canal /*||
                             // TODO: re-enable Terran_Comsat_Station after add any
                             // logic to produce cloaked units.
                             GetType == BWAPI::UnitTypes::Terran_Comsat_Station*/) &&
                            [&u](Unit& tmpUnit) { return u->canAttack(PositionOrUnit(tmpUnit)) && u->isInWeaponRange(tmpUnit); },
                            u->getPosition(),
                            std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()), Broodwar->self()->weaponMaxRange(u->getType().airWeapon())));

                    if (bestAttackableInRangeEnemyTacticalUnit)
                    {
                        const BWAPI::Unit oldOrderTarget = u->getTarget();
                        if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableInRangeEnemyTacticalUnit)
                        {
                            u->attack(bestAttackableInRangeEnemyTacticalUnit);
                        }
                        continue;
                    }

                    // Distance multiplier is arbitrary - the value seems to result in ok movement behaviour.
                    // Less than for closestAttackableEnemyThreatUnit because we would slightly prefer to attack
                    // closer enemy units that can't retaliate than further away ones that can.
                    const BWAPI::Unit bestAttackableEnemyTacticalUnit =
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists &&
                            !IsWorker &&
                            (CanAttack ||
                             GetType == BWAPI::UnitTypes::Terran_Bunker ||
                             GetType == BWAPI::UnitTypes::Protoss_High_Templar ||
                             GetType == BWAPI::UnitTypes::Zerg_Defiler ||
                             GetType == BWAPI::UnitTypes::Protoss_Dark_Archon ||
                             GetType == BWAPI::UnitTypes::Terran_Science_Vessel ||
                             GetType == BWAPI::UnitTypes::Zerg_Queen ||
                             GetType == BWAPI::UnitTypes::Protoss_Shuttle ||
                             GetType == BWAPI::UnitTypes::Terran_Dropship ||
                             GetType == BWAPI::UnitTypes::Protoss_Observer ||
                             GetType == BWAPI::UnitTypes::Zerg_Overlord ||
                             GetType == BWAPI::UnitTypes::Terran_Medic ||
                             GetType == BWAPI::UnitTypes::Terran_Nuclear_Silo ||
                             GetType == BWAPI::UnitTypes::Zerg_Nydus_Canal /*||
                             // TODO: re-enable Terran_Comsat_Station after add any
                             // logic to produce cloaked units.
                             GetType == BWAPI::UnitTypes::Terran_Comsat_Station*/) &&
                            [&u, &closestEnemyUnliftedBuildingAnywhere](Unit& tmpUnit)
                            {
                                return
                                    u->canAttack(PositionOrUnit(tmpUnit)) &&
                                    (tmpUnit == closestEnemyUnliftedBuildingAnywhere ||
                                     tmpUnit->getDistance(closestEnemyUnliftedBuildingAnywhere) <=
                                         (!tmpUnit->isFlying() ? Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()) : Broodwar->self()->weaponMaxRange(u->getType().airWeapon()))
                                         + 224);
                            },
                            u->getPosition(),
                            std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + (int) (std::max(std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()),
                                                     Broodwar->self()->weaponMaxRange(u->getType().airWeapon())),
                                            96)
                                   * 1));

                    if (bestAttackableEnemyTacticalUnit)
                    {
                        const BWAPI::Unit oldOrderTarget = u->getTarget();
                        if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableEnemyTacticalUnit)
                        {
                            u->attack(bestAttackableEnemyTacticalUnit);
                        }
                        continue;
                    }

                    // Attack buildings if in range. May be useful against wall-ins.
                    // Commenting-out for the time being.
                    /*const BWAPI::Unit bestAttackableInRangeEnemyNonWorkerUnit =
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists && !IsWorker &&
                            [&u](Unit& tmpUnit) { return u->canAttack(PositionOrUnit(tmpUnit)) && u->isInWeaponRange(tmpUnit); },
                            u->getPosition(),
                            std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()), Broodwar->self()->weaponMaxRange(u->getType().airWeapon())));
                    if (bestAttackableInRangeEnemyNonWorkerUnit)
                    {
                        const BWAPI::Unit oldOrderTarget = u->getTarget();
                        if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableInRangeEnemyNonWorkerUnit)
                        {
                            u->attack(bestAttackableInRangeEnemyNonWorkerUnit);
                        }
                        continue;
                    }*/

                    // Distance multiplier should be the same as for closestEnemyUnliftedBuildingAnywhere.
                    const BWAPI::Unit bestAttackableEnemyNonWorkerUnit =
                        Broodwar->getBestUnit(
                            getBestEnemyThreatUnitLambda,
                            IsEnemy && IsVisible && IsDetected && Exists && !IsWorker &&
                            [&u, &closestEnemyUnliftedBuildingAnywhere](Unit& tmpUnit)
                            {
                                return
                                    u->canAttack(PositionOrUnit(tmpUnit)) &&
                                    (tmpUnit == closestEnemyUnliftedBuildingAnywhere ||
                                     tmpUnit->getDistance(closestEnemyUnliftedBuildingAnywhere) <=
                                         (!tmpUnit->isFlying() ? Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()) : Broodwar->self()->weaponMaxRange(u->getType().airWeapon()))
                                         + 224);
                            },
                            u->getPosition(),
                            std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + (int) (std::max(std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()),
                                                     Broodwar->self()->weaponMaxRange(u->getType().airWeapon())),
                                            256)
                                   * 1));
                    if (bestAttackableEnemyNonWorkerUnit)
                    {
                        const BWAPI::Unit oldOrderTarget = u->getTarget();
                        if (u->isIdle() || oldOrderTarget == nullptr || oldOrderTarget != bestAttackableEnemyNonWorkerUnit)
                        {
                            u->attack(bestAttackableEnemyNonWorkerUnit);
                        }
                        continue;
                    }
                }

                if (u != scoutingWorker &&
                    u != scoutingZergling &&
                    isSpeedlingBuildOrder &&
                    (Broodwar->self()->getUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) != Broodwar->self()->getMaxUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) ||
                     (isEnemyXimp && Broodwar->getFrameCount() < 5300)))
                {
                    continue;
                }

                if (closestEnemyUnliftedBuildingAnywherePos != BWAPI::Positions::Unknown && closestEnemyUnliftedBuildingAnywherePos != BWAPI::Positions::None)
                {
                    if (u->canRightClick(PositionOrUnit(closestEnemyUnliftedBuildingAnywherePos)))
                    {
                        // Dunno if rightClick'ing rather than moving is ever beneficial in these scenarios
                        // or whether it is possible to be able to do one but not the other, but let's prefer
                        // rightClick'ing over moving just in case (although it would probably only possibly
                        // matter if the command optimization option level is zero).
                        u->rightClick(closestEnemyUnliftedBuildingAnywherePos);
                        continue;
                    }

                    if (u->canMove())
                    {
                        u->move(closestEnemyUnliftedBuildingAnywherePos);
                        continue;
                    }
                }
            }

            if (u != scoutingWorker &&
                u != scoutingZergling &&
                isSpeedlingBuildOrder &&
                (Broodwar->self()->getUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) != Broodwar->self()->getMaxUpgradeLevel(BWAPI::UpgradeTypes::Metabolic_Boost) ||
                 (isEnemyXimp && Broodwar->getFrameCount() < 5300)))
            {
                continue;
            }

            BWAPI::Position targetPos = BWAPI::Positions::Unknown;
            std::vector<BWAPI::TilePosition> targetStartLocs;

            // Block to restrict scope of variables.
            {
                BWAPI::Position bestPos = BWAPI::Positions::Unknown;
                int closestDist = std::numeric_limits<int>::max();
                for (const BWAPI::Position pos : lastKnownEnemyUnliftedBuildingsAnywherePosSet)
                {
                    const int dist = u->getDistance(pos);
                    if (dist < closestDist)
                    {
                        bestPos = pos;
                        closestDist = dist;
                    }
                }

                if (bestPos != BWAPI::Positions::Unknown)
                {
                    targetPos = bestPos;
                }
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLocs.empty() && !enemyStartLocs.empty())
            {
                // For simplicity, let's only attack the first enemy (rather than randomizing to pick one & remembering
                // what we picked for future frames or possibly splitting our army).
                // TODO: skip allies?
                targetStartLocs.push_back(*enemyStartLocs.begin());
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLocs.empty() && probableEnemyStartLoc != BWAPI::TilePositions::Unknown)
            {
                targetStartLocs.push_back(probableEnemyStartLoc);
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLocs.empty() && !unscoutedOtherStartLocs.empty())
            {
                const int tmpX = (int) u->getClientInfo(scoutingTargetStartLocXInd);
                const int tmpY = (int) u->getClientInfo(scoutingTargetStartLocYInd);
                if ((tmpX != 0 || tmpY != 0) &&
                    unscoutedOtherStartLocs.find(TilePosition(tmpX, tmpY)) != unscoutedOtherStartLocs.end())
                {
                    targetStartLocs.push_back(TilePosition(tmpX, tmpY));
                }
                else
                {
                    for (const BWAPI::TilePosition loc : unscoutedOtherStartLocs)
                    {
                        targetStartLocs.push_back(loc);
                    }
                }
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLocs.empty())
            {
                const int tmpX = (int) u->getClientInfo(scoutingTargetPosXInd);
                const int tmpY = (int) u->getClientInfo(scoutingTargetPosYInd);
                // If en-route to a position that isn't visible or isn't clear then continue going there.
                // Occasionally re-randomize late-game cos the unit may not have a path to get there.
                if ((tmpX != 0 || tmpY != 0) &&
                    Broodwar->getFrameCount() % (60 * 24) >= 6 &&
                    (!Broodwar->isVisible(TilePosition(Position(tmpX, tmpY))) ||
                     !Broodwar->getUnitsOnTile(TilePosition(Position(tmpX, tmpY)), IsEnemy && IsVisible && Exists && IsBuilding && !IsLifted).empty()))
                {
                    targetPos = Position(tmpX, tmpY);
                }
                else
                {
                    // Target a random position - preferably one that is not visible.
                    BWAPI::Position pos;
                    for (int i = 0; i < 10; ++i)
                    {
                        pos =
                            Position(rand() % (Broodwar->mapWidth() * BWAPI::TILEPOSITION_SCALE),
                                     rand() % (Broodwar->mapHeight() * BWAPI::TILEPOSITION_SCALE));

                        if (!Broodwar->isVisible(TilePosition(pos)))
                        {
                            break;
                        }
                    }

                    targetPos = pos;
                }
            }

            if (targetPos != BWAPI::Positions::Unknown || !targetStartLocs.empty())
            {
                BWAPI::Position pos = BWAPI::Positions::None;
                BWAPI::TilePosition locIfAny = BWAPI::TilePositions::None;
                if (targetPos != BWAPI::Positions::Unknown)
                {
                    pos = targetPos;
                }
                else if (targetStartLocs.size() == 1)
                {
                    locIfAny = targetStartLocs.front();
                }
                else
                {
                    // Target the closest target position that has less than a certain number of units
                    // assigned to it, or if they all have at least that amount then target the one that
                    // has the least assigned to it.
                    std::sort(
                        targetStartLocs.begin(),
                        targetStartLocs.end(),
                        [&u, &getRoughPos](const BWAPI::TilePosition loc1, const BWAPI::TilePosition loc2)
                        {
                            return (u->getDistance(getRoughPos(loc1, BWAPI::UnitTypes::Special_Start_Location)) < u->getDistance(getRoughPos(loc2, BWAPI::UnitTypes::Special_Start_Location)));
                        });
    
                    BWAPI::TilePosition startLocWithFewestUnits = BWAPI::TilePositions::None;
                    for (const BWAPI::TilePosition startLoc : targetStartLocs)
                    {
                        if (((u != scoutingWorker && u != scoutingZergling) || possibleOverlordScoutLocs.find(startLoc) != possibleOverlordScoutLocs.end()) /*&&
                            (numNonOverlordUnitsTargetingStartLoc.find(startLoc) == numNonOverlordUnitsTargetingStartLoc.end() ||
                             numNonOverlordUnitsTargetingStartLoc.at(startLoc) < 6)*/)
                        {
                            locIfAny = startLoc;
                            ++numNonOverlordUnitsTargetingStartLoc[locIfAny];
                            break;
                        }
                        else if (startLocWithFewestUnits == BWAPI::TilePositions::None ||
                                 (numNonOverlordUnitsTargetingStartLoc.find(startLocWithFewestUnits) != numNonOverlordUnitsTargetingStartLoc.end() &&
                                  (numNonOverlordUnitsTargetingStartLoc.find(startLoc) == numNonOverlordUnitsTargetingStartLoc.end() ||
                                   numNonOverlordUnitsTargetingStartLoc.at(startLoc) < numNonOverlordUnitsTargetingStartLoc.at(startLocWithFewestUnits))))
                        {
                            startLocWithFewestUnits = startLoc;
                        }
                    }
    
                    if (locIfAny == BWAPI::TilePositions::None && startLocWithFewestUnits != BWAPI::TilePositions::None)
                    {
                        locIfAny = startLocWithFewestUnits;
                        ++numNonOverlordUnitsTargetingStartLoc[locIfAny];
                    }
                }

                if (pos == BWAPI::Positions::None && locIfAny != BWAPI::TilePositions::None)
                {
                    pos = getRoughPos(locIfAny, BWAPI::UnitTypes::Special_Start_Location);
                }

                if (pos != BWAPI::Positions::None)
                {
                    bool isCmdIssued = false;
                    if (u->canRightClick(PositionOrUnit(pos)))
                    {
                        // Dunno if rightClick'ing rather than moving is ever beneficial in these scenarios
                        // or whether it is possible to be able to do one but not the other, but let's prefer
                        // rightClick'ing over moving just in case (although it would probably only possibly
                        // matter if the command optimization option level is zero).
                        u->rightClick(pos);
                        isCmdIssued = true;
                    }    
                    else if (u->canMove())
                    {
                        u->move(pos);
                        isCmdIssued = true;
                    }

                    if (isCmdIssued)
                    {
                        if (locIfAny == BWAPI::TilePositions::None)
                        {
                            u->setClientInfo(pos.x, scoutingTargetPosXInd);
                            u->setClientInfo(pos.y, scoutingTargetPosYInd);
                        }
                        else
                        {
                            u->setClientInfo(locIfAny.x, scoutingTargetStartLocXInd);
                            u->setClientInfo(locIfAny.y, scoutingTargetStartLocYInd);
                        }

                        // Using a continue statement because we have just issued a command to this unit.
                        continue;
                    }
                }
            }
        }
        else if (u->getType() == UnitTypes::Zerg_Overlord)
        {
            if (!noCmdPending(u))
            {
                continue;
            }

            const BWAPI::Position oldTargetPos = u->getTargetPosition();

            // After we have started pulling an overlord back to base, don't send it out again.
            if (myStartRoughPos != BWAPI::Positions::Unknown && oldTargetPos == myStartRoughPos)
            {
                continue;
            }

            BWAPI::Position targetPos = BWAPI::Positions::Unknown;
            BWAPI::TilePosition targetStartLoc = BWAPI::TilePositions::Unknown;

            // If we know where an enemy starting location is and an enemy is known to be Terran race
            // then don't risk sending out overlords / return them back to our base for safety.
            // If being attacked then return back to our base for safety.
            // Note: isUnderAttack is misleading / not reliable as mentioned elsewhere in this src but never mind.
            // Return overlords back to our base for safety after a few minutes of in-game time or if we see a risk
            // (or against a Terran, when see any enemy building or roughly when a Terran could get first marine).
            if (myStartRoughPos != BWAPI::Positions::Unknown &&
                (!enemyStartLocs.empty() ||
                 (isARemainingEnemyTerran && otherStartLocs.size() == 1) ||
                 (isARemainingEnemyTerran && (!lastKnownEnemyUnliftedBuildingsAnywherePosSet.empty() || (isSpeedlingBuildOrder ? probableEnemyStartLoc != BWAPI::TilePositions::Unknown : Broodwar->getFrameCount() >= 2600))) ||
                 u->isUnderAttack() ||
                 Broodwar->getBestUnit(
                     getBestEnemyThreatUnitLambda,
                     IsEnemy && IsVisible && Exists && !IsWorker &&
                     (CanAttack ||
                      // Pull overlords back if we see special buildings like hydra den that are likely to mean
                      // the enemy will produce units that can kill the overlord somehow (e.g. even psi storm).
                      // Not Terran_Barracks because there is already logic based on frame count to cover marines.
                      //GetType == BWAPI::UnitTypes::Terran_Barracks ||
                      GetType == BWAPI::UnitTypes::Zerg_Hydralisk_Den ||
                      GetType == BWAPI::UnitTypes::Protoss_Stargate ||
                      GetType == BWAPI::UnitTypes::Terran_Starport ||
                      GetType == BWAPI::UnitTypes::Terran_Control_Tower ||
                      GetType == BWAPI::UnitTypes::Zerg_Spire ||
                      GetType == BWAPI::UnitTypes::Zerg_Greater_Spire ||
                      GetType == BWAPI::UnitTypes::Protoss_Fleet_Beacon ||
                      GetType == BWAPI::UnitTypes::Protoss_Arbiter_Tribunal ||
                      GetType == BWAPI::UnitTypes::Terran_Science_Facility ||
                      GetType == BWAPI::UnitTypes::Terran_Physics_Lab ||
                      GetType == BWAPI::UnitTypes::Terran_Covert_Ops ||
                      GetType == BWAPI::UnitTypes::Terran_Nuclear_Silo ||
                      GetType == BWAPI::UnitTypes::Protoss_Templar_Archives ||
                      GetType == BWAPI::UnitTypes::Terran_Bunker ||
                      GetType == BWAPI::UnitTypes::Protoss_High_Templar ||
                      GetType == BWAPI::UnitTypes::Zerg_Defiler ||
                      GetType == BWAPI::UnitTypes::Protoss_Dark_Archon ||
                      GetType == BWAPI::UnitTypes::Terran_Science_Vessel ||
                      GetType == BWAPI::UnitTypes::Zerg_Queen ||
                      GetType == BWAPI::UnitTypes::Protoss_Shuttle ||
                      GetType == BWAPI::UnitTypes::Terran_Dropship ||
                      //GetType == BWAPI::UnitTypes::Protoss_Observer ||
                      //GetType == BWAPI::UnitTypes::Zerg_Overlord ||
                      GetType == BWAPI::UnitTypes::Terran_Medic ||
                      GetType == BWAPI::UnitTypes::Terran_Nuclear_Silo ||
                      GetType == BWAPI::UnitTypes::Zerg_Nydus_Canal /*||
                      GetType == BWAPI::UnitTypes::Terran_Comsat_Station*/) &&
                     [&u](Unit& tmpUnit) { return !tmpUnit->getType().canAttack() || tmpUnit->getType().airWeapon() != BWAPI::WeaponTypes::None; },
                     u->getPosition(),
                     std::max(u->getType().dimensionLeft(), std::max(u->getType().dimensionUp(), std::max(u->getType().dimensionRight(), u->getType().dimensionDown()))) + (int) (std::max(std::max(Broodwar->self()->weaponMaxRange(u->getType().groundWeapon()),
                                                 Broodwar->self()->weaponMaxRange(u->getType().airWeapon())),
                                        1024)
                                   * 1)) != nullptr))
            {
                targetPos = myStartRoughPos;
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLoc == BWAPI::TilePositions::Unknown && !unscoutedOtherStartLocs.empty() &&
                (isSpeedlingBuildOrder || Broodwar->getFrameCount() < (5 * 60 * 24)))
            {
                const int tmpX = (int) u->getClientInfo(scoutingTargetStartLocXInd);
                const int tmpY = (int) u->getClientInfo(scoutingTargetStartLocYInd);
                if ((tmpX != 0 || tmpY != 0) &&
                    unscoutedOtherStartLocs.find(TilePosition(tmpX, tmpY)) != unscoutedOtherStartLocs.end())
                {
                    targetStartLoc = TilePosition(tmpX, tmpY);
                }
                else
                {
                    if (!possibleOverlordScoutLocs.empty())
                    {
                        int closestOtherStartPosDistance = std::numeric_limits<int>::max();
                        for (const BWAPI::TilePosition loc : possibleOverlordScoutLocs)
                        {
                            const int dist = u->getDistance(getRoughPos(loc, BWAPI::UnitTypes::Special_Start_Location));
                            if (dist < closestOtherStartPosDistance)
                            {
                                targetStartLoc = loc;
                                closestOtherStartPosDistance = dist;
                            }
                        }
                    }
                }
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLoc == BWAPI::TilePositions::Unknown)
            {
                // Commented out randomizing - for now let's return overlords back to our base for safety.
                //// Target a random position.
                //targetPos = Position(rand() % (Broodwar->mapWidth() * BWAPI::TILEPOSITION_SCALE),
                //                     rand() % (Broodwar->mapHeight() * BWAPI::TILEPOSITION_SCALE));
                if (myStartRoughPos != BWAPI::Positions::Unknown)
                {
                    targetPos = myStartRoughPos;
                }
            }

            if (targetPos == BWAPI::Positions::Unknown && targetStartLoc != BWAPI::TilePositions::Unknown)
            {
                targetPos = getRoughPos(targetStartLoc, BWAPI::UnitTypes::Special_Start_Location);
            }

            if (targetPos != BWAPI::Positions::Unknown)
            {
                bool isCmdIssued = false;
                if (u->canRightClick(PositionOrUnit(targetPos)))
                {
                    // Dunno if rightClick'ing rather than moving is ever beneficial in these scenarios
                    // or whether it is possible to be able to do one but not the other, but let's prefer
                    // rightClick'ing over moving just in case (although it would probably only possibly
                    // matter if the command optimization option level is zero).
                    u->rightClick(targetPos);
                    isCmdIssued = true;
                }    
                else if (u->canMove())
                {
                    u->move(targetPos);
                    isCmdIssued = true;
                }

                if (isCmdIssued)
                {
                    if (targetStartLoc == BWAPI::TilePositions::Unknown)
                    {
                        u->setClientInfo(targetPos.x, scoutingTargetPosXInd);
                        u->setClientInfo(targetPos.y, scoutingTargetPosYInd);
                    }
                    else
                    {
                        possibleOverlordScoutLocs.erase(targetStartLoc);
                        u->setClientInfo(targetStartLoc.x, scoutingTargetStartLocXInd);
                        u->setClientInfo(targetStartLoc.y, scoutingTargetStartLocYInd);
                    }

                    // Using a continue statement because we have just issued a command to this unit.
                    continue;
                }
            }
        }
    }

    // Mineral gathering commands.
    if (!myFreeGatherers.empty())
    {
        // The first stage assigns free gatherers to free mineral patches near our starting base:
        // Prioritise the mineral patches according to shortest distance to our starting base
        // (note that the set of free mineral patches shrinks while this algorithm is executing,
        // i.e. remove a mineral patch from the set whenever a gatherer is assigned to that patch,
        // to avoid multiple gatherers being assigned to the same mineral patch that was initially free,
        // at least until the next stage),
        // then combinations of free gatherer and mineral patch are prioritised according to shortest
        // total distance from the gatherer to the mineral patch plus mineral patch to our starting base.
        //
        // The second stage simply assigns each remaining gatherer to whatever mineral patch is
        // closest to our starting base. If there are multiple mineral patches nearby our starting base
        // that are the same distance to our starting base then ties are broken by picking the mineral
        // patch closest to the gatherer (i.e. unfortunately in many cases they will all be assigned
        // to the same mineral patch but never mind).
        if (mainBase)
        {
            Unitset& freeMinerals =
                mainBase->getUnitsInRadius(
                    256,
                    BWAPI::Filter::IsMineralField &&
                    BWAPI::Filter::Exists &&
                    [&myFreeGatherers, &resourceToGathererMapAuto, &gathererToResourceMapAuto](BWAPI::Unit& tmpUnit)
                    {
                        if (tmpUnit->getResources() <= 0)
                        {
                            return false;
                        }
    
                        std::map<const BWAPI::Unit, BWAPI::Unit>::iterator resourceToGathererMapIter = resourceToGathererMapAuto.find(tmpUnit);
                        if (resourceToGathererMapIter == resourceToGathererMapAuto.end())
                        {
                            return true;
                        }
    
                        BWAPI::Unit& gatherer = resourceToGathererMapIter->second;
                        if (!gatherer->exists() ||
                            myFreeGatherers.contains(gatherer) ||
                            // Commented this out because it was causing workers' paths to cross (inefficient?).
                            //// Override workers that are currently returning from a mineral patch to a depot.
                            //gatherer->getOrder() == BWAPI::Orders::ResetCollision ||
                            //gatherer->getOrder() == BWAPI::Orders::ReturnMinerals ||
                            // Override workers that are not currently gathering minerals.
                            !gatherer->isGatheringMinerals())
                        {
                            return true;
                        }
    
                        std::map<const BWAPI::Unit, BWAPI::Unit>::iterator gathererToResourceMapIter = gathererToResourceMapAuto.find(gatherer);
                        if (gathererToResourceMapIter == gathererToResourceMapAuto.end())
                        {
                            return true;
                        }
    
                        BWAPI::Unit& resource = gathererToResourceMapIter->second;
                        return resource != tmpUnit;
                    });

            // Each element of the set is a mineral.
            struct MineralSet { std::set<const BWAPI::Unit> val; };
            // The key is the total distance from mineral to depot plus distance from gatherer to mineral.
            struct TotCostMap { std::map<int, MineralSet> val; };
            // The key is the distance from mineral to depot.
            struct MineralToDepotCostMap { std::map<int, TotCostMap> val; };
            // The key is the gatherer.
            struct CostMap { std::map<const BWAPI::Unit, MineralToDepotCostMap> val; };
    
            CostMap costMap;
            bool isGatherPossible = false;

            // Fill in the cost map.
            for (auto& mineral : freeMinerals)
            {
                const int mineralToDepotCost = mineral->getDistance(mainBase);
                for (auto& gatherer : myFreeGatherers)
                {
                    if (gatherer->canGather(mineral))
                    {
                        costMap.val[gatherer].val[mineralToDepotCost].val[gatherer->getDistance(mineral) + mineralToDepotCost].val.emplace(mineral);
                        isGatherPossible = true;
                    }
                }
            }

            while (isGatherPossible)
            {
                isGatherPossible = false;
                BWAPI::Unit bestGatherer = nullptr;
                BWAPI::Unit bestMineral = nullptr;
                int bestMineralToDepotCost = std::numeric_limits<int>::max();
                int bestTotCost = std::numeric_limits<int>::max();

                for (std::map<const BWAPI::Unit, MineralToDepotCostMap>::iterator gathererIter = costMap.val.begin(); gathererIter != costMap.val.end(); )
                {
                    if (!myFreeGatherers.contains(gathererIter->first))
                    {
                        costMap.val.erase(gathererIter++);
                        continue;
                    }

                    bool isGatherPossibleForGatherer = false;
                    BWAPI::Unit mineral = nullptr;
                    int mineralToDepotCost = std::numeric_limits<int>::max();
                    int totCost = std::numeric_limits<int>::max();

                    for (std::map<int, TotCostMap>::iterator mineralToDepotCostIter = gathererIter->second.val.begin(); mineralToDepotCostIter != gathererIter->second.val.end(); )
                    {
                        bool isGatherPossibleForMineralToDepotCost = false;
                        if (mineralToDepotCostIter->first > bestMineralToDepotCost)
                        {
                            // Need to assume it is still possible.
                            isGatherPossibleForGatherer = true;
                            break;
                        }
    
                        for (std::map<int, MineralSet>::iterator totCostIter = mineralToDepotCostIter->second.val.begin(); totCostIter != mineralToDepotCostIter->second.val.end(); )
                        {
                            bool isGatherPossibleForTotCost = false;
                            if (mineralToDepotCostIter->first == bestMineralToDepotCost && totCostIter->first > bestTotCost)
                            {
                                // Need to assume it is still possible.
                                isGatherPossibleForMineralToDepotCost = true;
                                break;
                            }
    
                            for (std::set<const BWAPI::Unit>::iterator mineralIter = totCostIter->second.val.begin(); mineralIter != totCostIter->second.val.end(); )
                            {
                                if (!freeMinerals.contains(*mineralIter))
                                {
                                    totCostIter->second.val.erase(mineralIter++);
                                    continue;
                                }

                                mineral = *mineralIter;
                                isGatherPossibleForTotCost = true;
                                mineralToDepotCost = mineralToDepotCostIter->first;
                                totCost = totCostIter->first;
                                break;
                            }

                            if (!isGatherPossibleForTotCost)
                            {
                                mineralToDepotCostIter->second.val.erase(totCostIter++);
                                continue;
                            }
                            else
                            {
                                isGatherPossibleForMineralToDepotCost = true;
                                break;
                            }
                        }

                        if (!isGatherPossibleForMineralToDepotCost)
                        {
                            gathererIter->second.val.erase(mineralToDepotCostIter++);
                            continue;
                        }
                        else
                        {
                            isGatherPossibleForGatherer = true;
                            break;
                        }
                    }

                    if (!isGatherPossibleForGatherer)
                    {
                        myFreeGatherers.erase(gathererIter->first);
                        costMap.val.erase(gathererIter++);
                        continue;
                    }
                    else
                    {
                        if (mineralToDepotCost < bestMineralToDepotCost || (mineralToDepotCost == bestMineralToDepotCost && totCost < bestTotCost))
                        {
                            isGatherPossible = true;
                            bestGatherer = gathererIter->first;
                            bestMineral = mineral;
                            bestMineralToDepotCost = mineralToDepotCost;
                            bestTotCost = totCost;
                        }

                        ++gathererIter;
                        continue;
                    }
                }

                if (isGatherPossible)
                {
                    bestGatherer->gather(bestMineral);

                    myFreeGatherers.erase(bestGatherer);
                    freeMinerals.erase(bestMineral);
                
                    if (gathererToResourceMap.find(bestGatherer) != gathererToResourceMap.end() && resourceToGathererMap.find(gathererToResourceMap.at(bestGatherer)) != resourceToGathererMap.end() && resourceToGathererMap.at(gathererToResourceMap.at(bestGatherer)) == bestGatherer)
                    {
                        resourceToGathererMap.erase(gathererToResourceMap.at(bestGatherer));
                    }
                
                    resourceToGathererMap[bestMineral] = bestGatherer;
                    gathererToResourceMap[bestGatherer] = bestMineral;
                    continue;
                }
            }

            for (auto& u : myFreeGatherers)
            {
                BWAPI::Unit mineralField = nullptr;
                mineralField = Broodwar->getBestUnit(
                    [&u, &mainBaseAuto](const BWAPI::Unit& bestSoFarUnit, const BWAPI::Unit& curUnit)
                    {
                        if (curUnit->getDistance(mainBaseAuto) != bestSoFarUnit->getDistance(mainBaseAuto))
                        {
                            return curUnit->getDistance(mainBaseAuto) < bestSoFarUnit->getDistance(mainBaseAuto) ? curUnit : bestSoFarUnit;
                        }

                        return u->getDistance(curUnit) < u->getDistance(bestSoFarUnit) ? curUnit : bestSoFarUnit;
                    },
                    BWAPI::Filter::IsMineralField &&
                    BWAPI::Filter::Exists &&
                    [&u](BWAPI::Unit& tmpUnit)
                    {
                        return tmpUnit->getResources() > 0 && u->canGather(tmpUnit);
                    },
                    mainBaseAuto->getPosition(),
                    std::max(mainBaseAuto->getType().dimensionLeft(), std::max(mainBaseAuto->getType().dimensionUp(), std::max(mainBaseAuto->getType().dimensionRight(), mainBaseAuto->getType().dimensionDown()))) + 256);

                if (mineralField == nullptr)
                {
                    mineralField = mainBase->getClosestUnit(
                        BWAPI::Filter::IsMineralField &&
                        BWAPI::Filter::Exists &&
                        [&u](BWAPI::Unit& tmpUnit)
                        {
                            return tmpUnit->getResources() > 0 && u->canGather(tmpUnit);
                        });
                }

                if (mineralField)
                {
                    u->gather(mineralField);
                
                    if (gathererToResourceMap.find(u) != gathererToResourceMap.end() && resourceToGathererMap.find(gathererToResourceMap.at(u)) != resourceToGathererMap.end() && resourceToGathererMap.at(gathererToResourceMap.at(u)) == u)
                    {
                        resourceToGathererMap.erase(gathererToResourceMap.at(u));
                    }
                
                    resourceToGathererMap[mineralField] = u;
                    gathererToResourceMap[u] = mineralField;
                    continue;
                }
            }
        }
    }

    // Update client info for each of my units (so can check it in future frames).
    for (auto& u : myUnits)
    {
        if (u->exists() && u->isCompleted() && u->getType() != BWAPI::UnitTypes::Zerg_Larva && u->getType() != BWAPI::UnitTypes::Zerg_Egg)
        {
            const int newX = u->getPosition().x;
            const int newY = u->getPosition().y;
            if ((int) u->getClientInfo(posXInd) != newX || (int) u->getClientInfo(posYInd) != newY)
            {
                u->setClientInfo(Broodwar->getFrameCount(), frameLastChangedPosInd);
            }
    
            u->setClientInfo(newX, posXInd);
            u->setClientInfo(newY, posYInd);

            if (u->isAttacking())
            {
                u->setClientInfo(Broodwar->getFrameCount(), frameLastAttackingInd);
            }

            if (u->isAttackFrame())
            {
                u->setClientInfo(Broodwar->getFrameCount(), frameLastAttackFrameInd);
            }

            if (u->isStartingAttack())
            {
                u->setClientInfo(Broodwar->getFrameCount(), frameLastStartingAttackInd);
            }
    
            if (u->getType().isWorker() && u->isCarryingMinerals())
            {
                u->setClientInfo(wasJustCarryingMineralsTrueVal, wasJustCarryingMineralsInd);
            }
        }
    }
}

void ZZZKBotAIModule::onSendText(std::string text)
{
    // Send the text to the game if it is not being processed.
    Broodwar->sendText("%s", text.c_str());

    // Make sure to use %s and pass the text as a parameter,
    // otherwise you may run into problems when you use the %(percent) character!
}

void ZZZKBotAIModule::onReceiveText(BWAPI::Player player, std::string text)
{
}

void ZZZKBotAIModule::onPlayerLeft(BWAPI::Player player)
{
}

void ZZZKBotAIModule::onNukeDetect(BWAPI::Position target)
{
    // Check if the target is a valid position
    if (target)
    {
        // if so, print the location of the nuclear strike target
        Broodwar << "Nuclear Launch Detected at " << target << std::endl;
    }
    else
    {
        Broodwar << "Nuclear Launch Detected at unknown position" << std::endl;
    }

    // You can also retrieve all the nuclear missile targets using Broodwar->getNukeDots()!
}

void ZZZKBotAIModule::onUnitDiscover(BWAPI::Unit unit)
{
}

void ZZZKBotAIModule::onUnitEvade(BWAPI::Unit unit)
{
}

void ZZZKBotAIModule::onUnitShow(BWAPI::Unit unit)
{
}

void ZZZKBotAIModule::onUnitHide(BWAPI::Unit unit)
{
}

void ZZZKBotAIModule::onUnitCreate(BWAPI::Unit unit)
{
    if (Broodwar->isReplay())
    {
        // if we are in a replay, then we will print out the build order of the structures
        if (unit->getType().isBuilding() && !unit->getPlayer()->isNeutral())
        {
            int seconds = Broodwar->getFrameCount()/24;
            int minutes = seconds/60;
            seconds %= 60;
            Broodwar->sendText("%.2d:%.2d: %s creates a %s", minutes, seconds, unit->getPlayer()->getName().c_str(), unit->getType().c_str());
        }
    }
}

void ZZZKBotAIModule::onUnitDestroy(BWAPI::Unit unit)
{
}

void ZZZKBotAIModule::onUnitMorph(BWAPI::Unit unit)
{
    if (Broodwar->isReplay())
    {
        // if we are in a replay, then we will print out the build order of the structures
        if (unit->getType().isBuilding() && !unit->getPlayer()->isNeutral())
        {
            int seconds = Broodwar->getFrameCount()/24;
            int minutes = seconds/60;
            seconds %= 60;
            Broodwar->sendText("%.2d:%.2d: %s morphs a %s", minutes, seconds, unit->getPlayer()->getName().c_str(), unit->getType().c_str());
        }
    }
}

void ZZZKBotAIModule::onUnitRenegade(BWAPI::Unit unit)
{
}

void ZZZKBotAIModule::onSaveGame(std::string gameName)
{
    Broodwar << "The game was saved to \"" << gameName << "\"" << std::endl;
}

void ZZZKBotAIModule::onUnitComplete(BWAPI::Unit unit)
{
}
